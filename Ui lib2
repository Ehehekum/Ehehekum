-- NeptuneUI Library
local NeptuneUI = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

-- UI Instance Creation
local function createInstance(class, properties)
    local instance = Instance.new(class)
    for prop, value in pairs(properties or {}) do
        instance[prop] = value
    end
    return instance
end

-- Animation Helper
local function createTween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Main Library Function
function NeptuneUI:CreateWindow(config)
    config = config or {}
    local window = {}

    -- ScreenGui
    local screenGui = createInstance("ScreenGui", {
        Parent = game.Players.LocalPlayer.PlayerGui,
        Name = config.Title or "NeptuneUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    -- Main Frame (Window)
    local mainFrame = createInstance("Frame", {
        Parent = screenGui,
        Size = UDim2.new(0, 500, 0, 350),
        Position = UDim2.new(0.5, -250, 0.5, -175),
        BackgroundColor3 = Color3.fromRGB(30, 30, 40),
        BorderSizePixel = 0,
        ClipsDescendants = true
    })
    createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = mainFrame })

    -- Gradient Background
    createInstance("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 50)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 60, 80))
        }),
        Rotation = 45,
        Parent = mainFrame
    })

    -- Title Bar
    local titleBar = createInstance("Frame", {
        Parent = mainFrame,
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(20, 20, 30),
        BorderSizePixel = 0
    })
    createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = titleBar })

    local titleLabel = createInstance("TextLabel", {
        Parent = titleBar,
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        BackgroundTransparency = 1,
        Text = config.Title or "NeptuneUI",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    -- Dragging Functionality
    local dragging, dragInput, dragStart, startPos
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            createTween(mainFrame, { Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y) }, 0.1)
        end
    end)

    -- Tab Container
    local tabContainer = createInstance("Frame", {
        Parent = mainFrame,
        Size = UDim2.new(0, 120, 1, -30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(25, 25, 35),
        BorderSizePixel = 0
    })
    createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = tabContainer })

    local tabList = createInstance("UIListLayout", {
        Parent = tabContainer,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })

    -- Content Area
    local contentArea = createInstance("Frame", {
        Parent = mainFrame,
        Size = UDim2.new(1, -120, 1, -30),
        Position = UDim2.new(0, 120, 0, 30),
        BackgroundTransparency = 1
    })

    -- Tab Management
    local tabs = {}
    local currentTab = nil

    function window:CreateTab(name)
        local tab = {}
        local tabButton = createInstance("TextButton", {
            Parent = tabContainer,
            Size = UDim2.new(1, -10, 0, 30),
            Position = UDim2.new(0, 5, 0, 0),
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Text = name,
            TextColor3 = Color3.fromRGB(150, 150, 150),
            TextSize = 14,
            Font = Enum.Font.Gotham,
            BorderSizePixel = 0
        })
        createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = tabButton })

        local tabFrame = createInstance("Frame", {
            Parent = contentArea,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false
        })
        local sectionList = createInstance("UIListLayout", {
            Parent = tabFrame,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })

        -- Tab Switching
        tabButton.MouseButton1Click:Connect(function()
            if currentTab ~= tab then
                if currentTab then
                    currentTab.Frame.Visible = false
                    createTween(currentTab.Button, { BackgroundColor3 = Color3.fromRGB(40, 40, 50), TextColor3 = Color3.fromRGB(150, 150, 150) }, 0.3)
                end
                tabFrame.Visible = true
                createTween(tabButton, { BackgroundColor3 = Color3.fromRGB(60, 60, 80), TextColor3 = Color3.fromRGB(255, 255, 255) }, 0.3)
                currentTab = tab
            end
        end)

        tab.Button = tabButton
        tab.Frame = tabFrame

        -- Section Creation
        function tab:CreateSection(name)
            local section = createInstance("Frame", {
                Parent = tabFrame,
                Size = UDim2.new(1, -20, 0, 100),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundColor3 = Color3.fromRGB(35, 35, 45),
                BorderSizePixel = 0
            })
            createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = section })

            local sectionTitle = createInstance("TextLabel", {
                Parent = section,
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = Color3.fromRGB(200, 200, 200),
                TextSize = 12,
                Font = Enum.Font.GothamBold,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            local elementList = createInstance("UIListLayout", {
                Parent = section,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5),
                HorizontalAlignment = Enum.HorizontalAlignment.Center
            })

            -- Dynamic Section Height
            local function updateSectionHeight()
                local height = elementList.AbsoluteContentSize.Y + 30
                createTween(section, { Size = UDim2.new(1, -20, 0, height) }, 0.2)
            end
            elementList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSectionHeight)

            -- Button
            function section:AddButton(config)
                local button = createInstance("TextButton", {
                    Parent = section,
                    Size = UDim2.new(1, -10, 0, 30),
                    Position = UDim2.new(0, 5, 0, 0),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                    Text = config.Title or "Button",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = button })

                -- Hover Effect
                button.MouseEnter:Connect(function()
                    createTween(button, { BackgroundColor3 = Color3.fromRGB(70, 70, 80) }, 0.2)
                end)
                button.MouseLeave:Connect(function()
                    createTween(button, { BackgroundColor3 = Color3.fromRGB(50, 50, 60) }, 0.2)
                end)

                -- Ripple Effect on Click
                button.MouseButton1Click:Connect(function()
                    local ripple = createInstance("Frame", {
                        Parent = button,
                        Size = UDim2.new(0, 0, 0, 0),
                        Position = UDim2.new(0.5, 0, 0.5, 0),
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                        BackgroundTransparency = 0.5,
                        ZIndex = button.ZIndex + 1
                    })
                    createInstance("UICorner", { CornerRadius = UDim.new(1, 0), Parent = ripple })
                    createTween(ripple, { Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1 }, 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out).Completed:Connect(function()
                        ripple:Destroy()
                    end)
                    if config.Callback then
                        config.Callback()
                    end
                end)
                updateSectionHeight()
            end

            -- Toggle
            function section:AddToggle(config)
                local toggle = {}
                local toggleFrame = createInstance("Frame", {
                    Parent = section,
                    Size = UDim2.new(1, -10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = toggleFrame })

                local toggleLabel = createInstance("TextLabel", {
                    Parent = toggleFrame,
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 5, 0, 0),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Toggle",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local toggleButton = createInstance("Frame", {
                    Parent = toggleFrame,
                    Size = UDim2.new(0, 40, 0, 20),
                    Position = UDim2.new(1, -45, 0.5, -10),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = toggleButton })

                local toggleCircle = createInstance("Frame", {
                    Parent = toggleButton,
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(0, 2, 0.5, -8),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = toggleCircle })

                local enabled = config.Default or false
                if enabled then
                    toggleCircle.Position = UDim2.new(1, -18, 0.5, -8)
                    toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
                end

                toggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        enabled = not enabled
                        createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3, Enum.EasingStyle.Quad)
                        createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                        if config.Callback then
                            config.Callback(enabled)
                        end
                    end
                end)
                updateSectionHeight()

                toggle.Set = function(value)
                    enabled = value
                    createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3)
                    createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                    if config.Callback then
                        config.Callback(enabled)
                    end
                end
                return toggle
            end

            -- Slider
            function section:AddSlider(config)
                local slider = {}
                local min, max, default = config.Min or 0, config.Max or 100, config.Default or 50
                local sliderFrame = createInstance("Frame", {
                    Parent = section,
                    Size = UDim2.new(1, -10, 0, 50),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = sliderFrame })

                local sliderLabel = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 5, 0, 5),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Slider",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local sliderBar = createInstance("Frame", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -20, 0, 6),
                    Position = UDim2.new(0, 10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = sliderBar })

                local fillBar = createInstance("Frame", {
                    Parent = sliderBar,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = Color3.fromRGB(100, 100, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = fillBar })

                local sliderValue = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(0, 50, 0, 20),
                    Position = UDim2.new(1, -60, 0, 5),
                    BackgroundTransparency = 1,
                    Text = tostring(default),
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham
                })

                local dragging = false
                sliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                sliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouseX = input.Position.X
                        local barX = sliderBar.AbsolutePosition.X
                        local barWidth = sliderBar.AbsoluteSize.X
                        local relativeX = math.clamp((mouseX - barX) / barWidth, 0, 1)
                        local value = min + (max - min) * relativeX
                        value = math.floor(value + 0.5)
                        createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                        sliderValue.Text = tostring(value)
                        if config.Callback then
                            config.Callback(value)
                        end
                    end
                end)
                updateSectionHeight()

                slider.Set = function(value)
                    value = math.clamp(value, min, max)
                    local relativeX = (value - min) / (max - min)
                    createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                    sliderValue.Text = tostring(value)
                    if config.Callback then
                        config.Callback(value)
                    end
                end
                return slider
            end

            return section
        end

        tabs[#tabs + 1] = tab
        if #tabs == 1 then
            tabButton:SimulateClick()
        end
        return tab
    end

    -- Notification System
    function window:CreateNotification(config)
        local notification = createInstance("Frame", {
            Parent = screenGui,
            Size = UDim2.new(0, 250, 0, 80),
            Position = UDim2.new(1, -260, 1, -90),
            BackgroundColor3 = Color3.fromRGB(35, 35, 45),
            BorderSizePixel = 0
        })
        createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = notification })

        local title = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 20),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Text = config.Title or "Notification",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local description = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 40),
            Position = UDim2.new(0, 5, 0, 25),
            BackgroundTransparency = 1,
            Text = config.Description or "This is a notification.",
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })

        createTween(notification, { BackgroundTransparency = 0, Position = UDim2.new(1, -260, 1, -90) }, 0.5).Completed:Connect(function()
            wait(config.Duration or 3)
            createTween(notification, { BackgroundTransparency = 1, Position = UDim2.new(1, -260, 1, -110) }, 0.5).Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end

    return window
end

return NeptuneUI.round(value)
                TweenService:Create(Fill, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Size = UDim2.new(relX, 0, 1, 0)
                }):Play()
                TweenService:Create(Knob, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Position = UDim2.new(relX, -10, 0, -5)
                }):Play()
                ValueLabel.Text = tostring(value)
                if callback then callback(value) end
            end
        end)

        return SliderFrame
    end

    -- Notification system
    function Window:CreateNotification(text, duration)
        local Notification = Instance.new("Frame")
        Notification.Size = UDim2.new(0, 300, 0, 100)
        Notification.Position = UDim2.new(1, -320, 1, -120)
        Notification.BackgroundColor3 = Config.Theme.BackgroundColor
        Notification.BackgroundTransparency = 0.2
        Notification.Parent = ScreenGui

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
        UICorner.Parent = Notification

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, -20, 1, -20)
        TextLabel.Position = UDim2.new(0, 10, 0, 10)
        TextLabel.BackgroundTransparency = 1
        TextLabel.Text = text or "Notification"
        TextLabel.TextColor3 = Config.Theme.TextColor
        TextLabel.Font = Config.Theme.Font
        TextLabel.TextSize = 14
        TextLabel.TextWrapped = true
        TextLabel.Parent = Notification

        -- Slide-in animation
        Notification.Position = UDim2.new(1, 0, 1, -120)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, -320, 1, -120)
        }):Play()

        -- Auto-dismiss
        wait(duration or 3)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, 0, 1, -120)
        }):Play()
        wait(Config.Animation.Duration)
        Notification:Destroy()
    end

    return Window
end

-- Theme customization
function NeptuneUI:SetTheme(theme)
    for key, value in pairs(theme) do
        Config.Theme[key] = value
    end
end

return NeptuneUIe.Transparency = 0.5
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -10, 1, 0)
    Label.Position = UDim2.new(0, 5, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -260, 1, -70)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation after duration
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Position = UDim2.new(1, 260, 1, -70)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        Notification:Destroy()
    end)
end

return NeptuneUI
