-- NeptuneUI: A modern, stylized Roblox UI library
local NeptuneUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Default configuration (customizable)
local Config = {
    Theme = {
        PrimaryColor = Color3.fromRGB(0, 120, 255),
        SecondaryColor = Color3.fromRGB(255, 255, 255),
        AccentColor = Color3.fromRGB(50, 50, 50),
        TextColor = Color3.fromRGB(255, 255, 255),
        BackgroundColor = Color3.fromRGB(20, 20, 30, 0.8), -- Glassmorphism with transparency
        BorderRadius = 10,
        Font = Enum.Font.GothamBold,
    },
    Animation = {
        Duration = 0.3,
        EasingStyle = Enum.EasingStyle.Quad,
        EasingDirection = Enum.EasingDirection.Out,
    },
}

-- Create main UI frame
function NeptuneUI:CreateWindow(title, size, position)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Parent = game.Players.LocalPlayer.PlayerGui
    ScreenGui.IgnoreGuiInset = true

    local MainFrame = Instance.new("Frame")
    MainFrame.Size = size or UDim2.new(0, 500, 0, 400)
    MainFrame.Position = position or UDim2.new(0.5, -250, 0.5, -200)
    MainFrame.BackgroundColor3 = Config.Theme.BackgroundColor
    MainFrame.BackgroundTransparency = 0.2
    MainFrame.BorderSizePixel = 0
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = ScreenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
    UICorner.Parent = MainFrame

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1, 0, 0, 50)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title or "NeptuneUI"
    TitleLabel.TextColor3 = Config.Theme.TextColor
    TitleLabel.Font = Config.Theme.Font
    TitleLabel.TextSize = 20
    TitleLabel.Parent = MainFrame

    -- Draggable window
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    MainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging and dragInput then
            update(dragInput)
        end
    end)

    local Window = { Frame = MainFrame }
    
    -- Button component
    function Window:CreateButton(text, callback)
        local Button = Instance.new("TextButton")
        Button.Size = UDim2.new(0.9, 0, 0, 40)
        Button.Position = UDim2.new(0.05, 0, 0, #MainFrame:GetChildren() * 50)
        Button.BackgroundColor3 = Config.Theme.PrimaryColor
        Button.Text = text or "Button"
        Button.TextColor3 = Config.Theme.TextColor
        Button.Font = Config.Theme.Font
        Button.TextSize = 16
        Button.Parent = MainFrame

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
        UICorner.Parent = Button

        -- Hover animation
        Button.MouseEnter:Connect(function()
            TweenService:Create(Button, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                BackgroundColor3 = Config.Theme.PrimaryColor:Lerp(Color3.fromRGB(255, 255, 255), 0.2)
            }):Play()
        end)

        Button.MouseLeave:Connect(function()
            TweenService:Create(Button, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                BackgroundColor3 = Config.Theme.PrimaryColor
            }):Play()
        end)

        Button.Activated:Connect(function()
            if callback then callback() end
        end)

        return Button
    end

    -- Toggle component
    function Window:CreateToggle(text, default, callback)
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Size = UDim2.new(0.9, 0, 0, 40)
        ToggleFrame.Position = UDim2.new(0.05, 0, 0, #MainFrame:GetChildren() * 50)
        ToggleFrame.BackgroundTransparency = 1
        ToggleFrame.Parent = MainFrame

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(0.7, 0, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text or "Toggle"
        Label.TextColor3 = Config.Theme.TextColor
        Label.Font = Config.Theme.Font
        Label.TextSize = 16
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = ToggleFrame

        local Toggle = Instance.new("Frame")
        Toggle.Size = UDim2.new(0, 50, 0, 25)
        Toggle.Position = UDim2.new(0.8, 0, 0.5, -12.5)
        Toggle.BackgroundColor3 = default and Config.Theme.PrimaryColor or Config.Theme.AccentColor
        Toggle.Parent = ToggleFrame

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 25)
        UICorner.Parent = Toggle

        local Circle = Instance.new("Frame")
        Circle.Size = UDim2.new(0, 20, 0, 20)
        Circle.Position = default and UDim2.new(0.6, 0, 0.5, -10) or UDim2.new(0.1, 0, 0.5, -10)
        Circle.BackgroundColor3 = Config.Theme.SecondaryColor
        Circle.Parent = Toggle

        local UICornerCircle = Instance.new("UICorner")
        UICornerCircle.CornerRadius = UDim.new(0, 20)
        UICornerCircle.Parent = Circle

        local state = default or false
        ToggleFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                state = not state
                TweenService:Create(Circle, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Position = state and UDim2.new(0.6, 0, 0.5, -10) or UDim2.new(0.1, 0, 0.5, -10)
                }):Play()
                TweenService:Create(Toggle, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    BackgroundColor3 = state and Config.Theme.PrimaryColor or Config.Theme.AccentColor
                }):Play()
                if callback then callback(state) end
            end
        end)

        return ToggleFrame
    end

    -- Slider component
    function Window:CreateSlider(text, min, max, default, callback)
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Size = UDim2.new(0.9, 0, 0, 60)
        SliderFrame.Position = UDim2.new(0.05, 0, 0, #MainFrame:GetChildren() * 50)
        SliderFrame.BackgroundTransparency = 1
        SliderFrame.Parent = MainFrame

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = text or "Slider"
        Label.TextColor3 = Config.Theme.TextColor
        Label.Font = Config.Theme.Font
        Label.TextSize = 16
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = SliderFrame

        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new(1, 0, 0, 10)
        SliderBar.Position = UDim2.new(0, 0, 0, 30)
        SliderBar.BackgroundColor3 = Config.Theme.AccentColor
        SliderBar.Parent = SliderFrame

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, 5)
        UICorner.Parent = SliderBar

        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        Fill.BackgroundColor3 = Config.Theme.PrimaryColor
        Fill.Parent = SliderBar

        local UICornerFill = Instance.new("UICorner")
        UICornerFill.CornerRadius = UDim.new(0, 5)
        UICornerFill.Parent = Fill

        local Knob = Instance.new("Frame")
        Knob.Size = UDim2.new(0, 20, 0, 20)
        Knob.Position = UDim2.new((default - min) / (max - min), -10, 0, -5)
        Knob.BackgroundColor3 = Config.Theme.SecondaryColor
        Knob.Parent = SliderBar

        local UICornerKnob = Instance.new("UICorner")
        UICornerKnob.CornerRadius = UDim.new(0, 20)
        UICornerKnob.Parent = Knob

        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.Size = UDim2.new(0, 50, 0, 20)
        ValueLabel.Position = UDim2.new(1, -60, 0, -25)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Text = tostring(default)
        ValueLabel.TextColor3 = Config.Theme.TextColor
        ValueLabel.Font = Config.Theme.Font
        ValueLabel.TextSize = 14
        ValueLabel.Parent = SliderBar

        local dragging = false
        SliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)

        SliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        RunService.RenderStepped:Connect(function()
            if dragging then
                local mousePos = UserInputService:GetMouseLocation()
                local relX = (mousePos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                relX = math.clamp(relX, 0, 1)
                local value = min + (max - min) * relX
                value = math.round(value)
                TweenService:Create(Fill, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Size = UDim2.new(relX, 0, 1, 0)
                }):Play()
                TweenService:Create(Knob, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Position = UDim2.new(relX, -10, 0, -5)
                }):Play()
                ValueLabel.Text = tostring(value)
                if callback then callback(value) end
            end
        end)

        return SliderFrame
    end

    -- Notification system
    function Window:CreateNotification(text, duration)
        local Notification = Instance.new("Frame")
        Notification.Size = UDim2.new(0, 300, 0, 100)
        Notification.Position = UDim2.new(1, -320, 1, -120)
        Notification.BackgroundColor3 = Config.Theme.BackgroundColor
        Notification.BackgroundTransparency = 0.2
        Notification.Parent = ScreenGui

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
        UICorner.Parent = Notification

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, -20, 1, -20)
        TextLabel.Position = UDim2.new(0, 10, 0, 10)
        TextLabel.BackgroundTransparency = 1
        TextLabel.Text = text or "Notification"
        TextLabel.TextColor3 = Config.Theme.TextColor
        TextLabel.Font = Config.Theme.Font
        TextLabel.TextSize = 14
        TextLabel.TextWrapped = true
        TextLabel.Parent = Notification

        -- Slide-in animation
        Notification.Position = UDim2.new(1, 0, 1, -120)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, -320, 1, -120)
        }):Play()

        -- Auto-dismiss
        wait(duration or 3)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, 0, 1, -120)
        }):Play()
        wait(Config.Animation.Duration)
        Notification:Destroy()
    end

    return Window
end

-- Theme customization
function NeptuneUI:SetTheme(theme)
    for key, value in pairs(theme) do
        Config.Theme[key] = value
    end
end

return NeptuneUIe.Transparency = 0.5
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -10, 1, 0)
    Label.Position = UDim2.new(0, 5, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -260, 1, -70)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation after duration
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Position = UDim2.new(1, 260, 1, -70)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        Notification:Destroy()
    end)
end

return NeptuneUI
