-- AstraUI Library
local AstraUI = {}
AstraUI.__index = AstraUI

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Create a new UI library instance
function AstraUI:New(ScreenGuiName)
    local self = setmetatable({}, AstraUI)
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = ScreenGuiName or "AstraUI"
    self.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.IgnoreGuiInset = true
    self.Windows = {}
    self.IsVisible = true

    -- Toggle Button (Show/Hide UI)
    self.ToggleButton = Instance.new("TextButton")
    self.ToggleButton.Size = UDim2.new(0, 60, 0, 60)
    self.ToggleButton.Position = UDim2.new(0, 10, 0, 10)
    self.ToggleButton.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    self.ToggleButton.BackgroundTransparency = 0.1
    self.ToggleButton.Text = "ðŸŒŒ"
    self.ToggleButton.TextColor3 = Color3.fromRGB(0, 255, 255)
    self.ToggleButton.TextSize = 24
    self.ToggleButton.Font = Enum.Font.Arcade
    self.ToggleButton.Parent = self.ScreenGui

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 15)
    Corner.Parent = self.ToggleButton

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(0, 255, 255)
    Stroke.Thickness = 2
    Stroke.Transparency = 0.2
    Stroke.Parent = self.ToggleButton

    -- Neon glow effect
    local Glow = Instance.new("UIGradient")
    Glow.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 200, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 255, 255))
    }
    Glow.Rotation = 45
    Glow.Parent = Stroke

    -- Toggle button animations
    self.ToggleButton.MouseEnter:Connect(function()
        TweenService:Create(self.ToggleButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0, TextSize = 26}):Play()
        TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0}):Play()
    end)
    self.ToggleButton.MouseLeave:Connect(function()
        TweenService:Create(self.ToggleButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0.1, TextSize = 24}):Play()
        TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0.2}):Play()
    end)

    self.ToggleButton.MouseButton1Click:Connect(function()
        self:ToggleVisibility()
    end)

    return self
end

-- Toggle UI visibility with fade animation
function AstraUI:ToggleVisibility()
    self.IsVisible = not self.IsVisible
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out)
    for _, window in ipairs(self.Windows) do
        local targetTransparency = self.IsVisible and 0.05 or 1
        TweenService:Create(window.Frame, tweenInfo, {BackgroundTransparency = targetTransparency}):Play()
        for _, element in ipairs(window.Elements) do
            local textTransparency = self.IsVisible and 0 or 1
            local bgTransparency = self.IsVisible and (element:IsA("TextButton") or element:IsA("Frame") or element:IsA("TextBox") and 0.2 or 0) or 1
            TweenService:Create(element, tweenInfo, {BackgroundTransparency = bgTransparency, TextTransparency = textTransparency}):Play()
        end
        for _, tab in ipairs(window.Tabs or {}) do
            for _, tabElement in ipairs(tab.Elements) do
                local textTransparency = self.IsVisible and 0 or 1
                local bgTransparency = self.IsVisible and (tabElement:IsA("TextButton") or tabElement:IsA("Frame") or tabElement:IsA("TextBox") and 0.2 or 0) or 1
                TweenService:Create(tabElement, tweenInfo, {BackgroundTransparency = bgTransparency, TextTransparency = textTransparency}):Play()
            end
        end
    end
end

-- Create a draggable window with cyberpunk design
function AstraUI:CreateWindow(Title, Size, Position)
    local Window = {}
    Window.Frame = Instance.new("Frame")
    Window.Frame.Size = Size or UDim2.new(0, 450, 0, 550)
    Window.Frame.Position = Position or UDim2.new(0.5, -225, 0.5, -275)
    Window.Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
    Window.Frame.BackgroundTransparency = 0.05
    Window.Frame.BorderSizePixel = 0
    Window.Frame.Parent = self.ScreenGui

    -- Cyberpunk gradient
    local Gradient = Instance.new("UIGradient")
    Gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
    }
    Gradient.Rotation = 45
    Gradient.Parent = Window.Frame

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 15)
    Corner.Parent = Window.Frame

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(0, 255, 255)
    Stroke.Thickness = 2
    Stroke.Transparency = 0.2
    Stroke.Parent = Window.Frame

    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Size = UDim2.new(1, 0, 0, 50)
    TitleBar.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    TitleBar.BackgroundTransparency = 0.3
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = Window.Frame

    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 15)
    TitleCorner.Parent = TitleBar

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(1, -20, 1, 0)
    TitleLabel.Position = UDim2.new(0, 20, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = Title or "AstraUI"
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 22
    TitleLabel.Font = Enum.Font.Arcade
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TitleBar

    -- Dragging functionality
    local dragging, dragInput, dragStart, startPos
    local function updateInput(input)
        local delta = input.Position - dragStart
        Window.Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Window.Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            updateInput(input)
        end
    end)

    Window.Elements = {}
    Window.Tabs = {}
    Window.NextPosition = UDim2.new(0, 20, 0, 100) -- Adjusted for tab bar
    Window.TabBar = Instance.new("Frame")
    Window.TabBar.Size = UDim2.new(1, 0, 0, 40)
    Window.TabBar.Position = UDim2.new(0, 0, 0, 50)
    Window.TabBar.BackgroundTransparency = 1
    Window.TabBar.Parent = Window.Frame

    local TabList = Instance.new("UIListLayout")
    TabList.FillDirection = Enum.FillDirection.Horizontal
    TabList.SortOrder = Enum.SortOrder.LayoutOrder
    TabList.Padding = UDim.new(0, 5)
    TabList.Parent = Window.TabBar

    table.insert(self.Windows, Window)

    -- Tab management
    function Window:AddTab(TabName)
        local Tab = {}
        Tab.Elements = {}
        Tab.Frame = Instance.new("Frame")
        Tab.Frame.Size = UDim2.new(1, -40, 1, -100)
        Tab.Frame.Position = UDim2.new(0, 20, 0, 100)
        Tab.Frame.BackgroundTransparency = 1
        Tab.Frame.Visible = false
        Tab.Frame.Parent = Window.Frame

        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0, 100, 0, 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
        TabButton.BackgroundTransparency = 0.3
        TabButton.Text = TabName or "Tab"
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 16
        TabButton.Font = Enum.Font.Arcade
        TabButton.Parent = Window.TabBar

        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 8)
        TabCorner.Parent = TabButton

        local TabStroke = Instance.new("UIStroke")
        TabStroke.Color = Color3.fromRGB(0, 255, 255)
        TabStroke.Thickness = 1.5
        TabStroke.Transparency = 0.5
        TabStroke.Parent = TabButton

        -- Tab selection
        TabButton.MouseButton1Click:Connect(function()
            for _, otherTab in ipairs(Window.Tabs) do
                otherTab.Frame.Visible = false
                TweenService:Create(otherTab.Button, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0.3}):Play()
            end
            Tab.Frame.Visible = true
            TweenService:Create(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0}):Play()
        end)

        Tab.Button = TabButton
        Tab.NextPosition = UDim2.new(0, 0, 0, 0)
        table.insert(Window.Tabs, Tab)

        -- Add elements to tab
        function Tab:AddButton(Text, Callback)
            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, 0, 0, 45)
            Button.Position = Tab.NextPosition
            Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
            Button.BackgroundTransparency = 0.2
            Button.Text = Text or "Button"
            Button.TextColor3 = Color3.fromRGB(255, 255, 255)
            Button.TextSize = 18
            Button.Font = Enum.Font.Arcade
            Button.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Button

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Button

            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0, TextSize = 19}):Play()
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0}):Play()
            end)
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0.2, TextSize = 18}):Play()
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0.5}):Play()
            end)

            Button.MouseButton1Click:Connect(function()
                if Callback then
                    Callback()
                end
            end)

            Tab.NextPosition = Tab.NextPosition + UDim2.new(0, 0, 0, 55)
            table.insert(Tab.Elements, Button)
        end

        function Tab:AddToggle(Text, Default, Callback)
            local Toggle = Instance.new("TextButton")
            Toggle.Size = UDim2.new(1, 0, 0, 45)
            Toggle.Position = Tab.NextPosition
            Toggle.BackgroundColor3 = Default and Color3.fromRGB(0, 255, 255) or Color3.fromRGB(40, 40, 50)
            Toggle.BackgroundTransparency = 0.2
            Toggle.Text = Text or "Toggle: " .. (Default and "On" or "Off")
            Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
            Toggle.TextSize = 18
            Toggle.Font = Enum.Font.Arcade
            Toggle.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Toggle

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Toggle

            local State = Default or false
            Toggle.MouseButton1Click:Connect(function()
                State = not State
                Toggle.Text = Text or "Toggle: " .. (State and "On" or "Off")
                local targetColor = State and Color3.fromRGB(0, 255, 255) or Color3.fromRGB(40, 40, 50)
                TweenService:Create(Toggle, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundColor3 = targetColor, BackgroundTransparency = 0.2}):Play()
                if Callback then
                    Callback(State)
                end
            end)

            Tab.NextPosition = Tab.NextPosition + UDim2.new(0, 0, 0, 55)
            table.insert(Tab.Elements, Toggle)
        end

        function Tab:AddSlider(Text, Min, Max, Default, Callback)
            local Slider = Instance.new("Frame")
            Slider.Size = UDim2.new(1, 0, 0, 60)
            Slider.Position = Tab.NextPosition
            Slider.BackgroundTransparency = 1
            Slider.Parent = Tab.Frame

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, 0, 0, 20)
            Label.BackgroundTransparency = 1
            Label.Text = Text or "Slider: " .. (Default or Min)
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 16
            Label.Font = Enum.Font.Arcade
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Slider

            local SliderBar = Instance.new("Frame")
            SliderBar.Size = UDim2.new(1, 0, 0, 10)
            SliderBar.Position = UDim2.new(0, 0, 0, 30)
            SliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            SliderBar.Parent = Slider

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 5)
            Corner.Parent = SliderBar

            local Fill = Instance.new("Frame")
            Fill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
            Fill.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
            Fill.Parent = SliderBar

            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(0, 5)
            FillCorner.Parent = Fill

            local Value = Default or Min
            local Dragging = false

            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Dragging = true
                end
            end)

            SliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Dragging = false
                end
            end)

            RunService.RenderStepped:Connect(function()
                if Dragging then
                    local mousePos = UserInputService:GetMouseLocation()
                    local relativeX = math.clamp((mousePos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                    Value = Min + (Max - Min) * relativeX
                    Value = math.floor(Value + 0.5)
                    Fill.Size = UDim2.new(relativeX, 0, 1, 0)
                    Label.Text = Text or "Slider: " .. Value
                    if Callback then
                        Callback(Value)
                    end
                end
            end)

            Tab.NextPosition = Tab.NextPosition + UDim2.new(0, 0, 0, 70)
            table.insert(Tab.Elements, Slider)
        end

        function Tab:AddTextbox(Text, Default, Callback)
            local Textbox = Instance.new("TextBox")
            Textbox.Size = UDim2.new(1, 0, 0, 45)
            Textbox.Position = Tab.NextPosition
            Textbox.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            Textbox.BackgroundTransparency = 0.2
            Textbox.Text = Default or Text or ""
            Textbox.PlaceholderText = Text or "Enter text..."
            Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
            Textbox.TextSize = 18
            Textbox.Font = Enum.Font.Arcade
            Textbox.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Textbox

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Textbox

            Textbox.Focused:Connect(function()
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0}):Play()
            end)
            Textbox.FocusLost:Connect(function(enterPressed)
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0.5}):Play()
                if enterPressed and Callback then
                    Callback(Textbox.Text)
                end
            end)

            Tab.NextPosition = Tab.NextPosition + UDim2.new(0, 0, 0, 55)
            table.insert(Tab.Elements, Textbox)
        end

        function Tab:AddDropdown(Text, Options, Default, Callback)
            local Dropdown = Instance.new("Frame")
            Dropdown.Size = UDim2.new(1, 0, 0, 45)
            Dropdown.Position = Tab.NextPosition
            Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            Dropdown.BackgroundTransparency = 0.2
            Dropdown.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Dropdown

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Dropdown

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -40, 1, 0)
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = Text or "Dropdown: " .. (Default or Options[1])
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 18
            Label.Font = Enum.Font.Arcade
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Dropdown

            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Size = UDim2.new(0, 30, 0, 30)
            DropdownButton.Position = UDim2.new(1, -35, 0, 7.5)
            DropdownButton.BackgroundTransparency = 1
            DropdownButton.Text = "â–¼"
            DropdownButton.TextColor3 = Color3.fromRGB(0, 255, 255)
            DropdownButton.TextSize = 16
            DropdownButton.Font = Enum.Font.Arcade
            DropdownButton.Parent = Dropdown

            local OptionFrame = Instance.new("Frame")
            OptionFrame.Size = UDim2.new(1, 0, 0, #Options * 40)
            OptionFrame.Position = UDim2.new(0, 0, 1, 5)
            OptionFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
            OptionFrame.BackgroundTransparency = 0.1
            OptionFrame.Visible = false
            OptionFrame.Parent = Dropdown

            local OptionCorner = Instance.new("UICorner")
            OptionCorner.CornerRadius = UDim.new(0, 10)
            OptionCorner.Parent = OptionFrame

            local OptionStroke = Instance.new("UIStroke")
            OptionStroke.Color = Color3.fromRGB(0, 255, 255)
            OptionStroke.Thickness = 1.5
            OptionStroke.Transparency = 0.5
            OptionStroke.Parent = OptionFrame

            local OptionList = Instance.new("UIListLayout")
            OptionList.SortState = not State
            Toggle.Text = Text or "Toggle: " .. (State and "On" or "Off")
            local targetColor = State and Color3.fromRGB(0, 255, 200) or Color3.fromRGB(40, 40, 40)
            TweenService:Create(Toggle, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundColor3 = targetColor, BackgroundTransparency = 0.2}):Play()
            if Callback then
                Callback(State)
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Toggle)
    end

    function Window:AddSlider(Text, Min, Max, Default, Callback)
        local Slider = Instance.new("Frame")
        Slider.Size = UDim2.new(1, -40, 0, 60)
        Slider.Position = Window.NextPosition
        Slider.BackgroundTransparency = 1
        Slider.Parent = Window.Frame

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = Text or "Slider: " .. (Default or Min)
        Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Label.TextSize = 16
        Label.Font = Enum.Font.SciFi
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Slider

        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new(1, 0, 0, 10)
        SliderBar.Position = UDim2.new(0, 0, 0, 30)
        SliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SliderBar.Parent = Slider

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 5)
        Corner.Parent = SliderBar

        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
        Fill.BackgroundColor3 = Color3.fromRGB(0, 255, 200)
        Fill.Parent = SliderBar

        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 5)
        FillCorner.Parent = Fill

        local Value = Default or Min
        local Dragging = false

        SliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = true
            end
        end)

        SliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = false
            end
        end)

        RunService.RenderStepped:Connect(function()
            if Dragging then
                local mousePos = UserInputService:GetMouseLocation()
                local relativeX = math.clamp((mousePos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                Value = Min + (Max - Min) * relativeX
                Value = math.floor(Value + 0.5)
                Fill.Size = UDim2.new(relativeX, 0, 1, 0)
                Label.Text = Text or "Slider: " .. Value
                if Callback then
                    Callback(Value)
                end
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 70)
        table.insert(Window.Elements, Slider)
    end

    function Window:AddTextbox(Text, Default, Callback)
        local Textbox = Instance.new("TextBox")
        Textbox.Size = UDim2.new(1, -40, 0, 45)
        Textbox.Position = Window.NextPosition
        Textbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Textbox.BackgroundTransparency = 0.2
        Textbox.Text = Default or Text or ""
        Textbox.PlaceholderText = Text or "Enter text..."
        Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
        Textbox.TextSize = 18
        Textbox.Font = Enum.Font.SciFi
        Textbox.Parent = Window.Frame

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 10)
        Corner.Parent = Textbox

        local Stroke = Instance.new("UIStroke")
        Stroke.Color = Color3.fromRGB(0, 255, 200)
        Stroke.Thickness = 1.5
        Stroke.Transparency = 0.5
        Stroke.Parent = Textbox

        Textbox.FocusLost:Connect(function(enterPressed)
            if enterPressed and Callback then
                Callback(Textbox.Text)
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Textbox)
    end

    function Window:AddDropdown(Text, Options, Default, Callback)
        local Dropdown = Instance.new("Frame")
        Dropdown.Size = UDim2.new(1, -40, 0, 45)
        Dropdown.Position = Window.NextPosition
        Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Dropdown.BackgroundTransparency = 0.2
        Dropdown.Parent = Window.Frame

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 10)
        Corner.Parent = Dropdown

        local Stroke = Instance.new("UIStroke")
        Stroke.Color = Color3.fromRGB(0, 255, 200)
        Stroke.Thickness = 1.5
        Stroke.Transparency = 0.5
        Stroke.Parent = Dropdown

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -30, 1, 0)
        Label.Position = UDim2.new(0, 10, 0, 0)
        Label.BackgroundTransparency = 1
        Label.Text = Text or "Dropdown: " .. (Default or Options[1])
        Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Label.TextSize = 18
        Label.Font = Enum.Font.SciFi
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Dropdown

        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Size = UDim2.new(0, 30, 0, 30)
        DropdownButton.Position = UDim2.new(1, -35, 0, 7.5)
        DropdownButton.BackgroundTransparency = 1
        DropdownButton.Text = "â–¼"
        DropdownButton.TextColor3 = Color3.fromRGB(0, 255, 200)
        DropdownButton.TextSize = 16
        DropdownButton.Font = Enum.Font.SciFi
        DropdownButton.Parent = Dropdown

        local OptionFrame = Instance.new("Frame")
        OptionFrame.Size = UDim2.new(1, 0, 0, #Options * 40)
        OptionFrame.Position = UDim2.new(0, 0, 1, 5)
        OptionFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        OptionFrame.BackgroundTransparency = 0.1
        OptionFrame.Visible = false
        OptionFrame.Parent = Dropdown

        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 10)
        OptionCorner.Parent = OptionFrame

        local OptionStroke = Instance.new("UIStroke")
        OptionStroke.Color = Color3.fromRGB(0, 255, 200)
        OptionStroke.Thickness = 1.5
        OptionStroke.Transparency = 0.5
        OptionStroke.Parent = OptionFrame

        local OptionList = Instance.new("UIListLayout")
        OptionList.SortOrder = Enum.SortOrder.LayoutOrder
        OptionList.Parent = OptionFrame

        local Selected = Default or Options[1]
        for i, option in ipairs(Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 40)
            OptionButton.BackgroundTransparency = 0.2
            OptionButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            OptionButton.Text = option
            OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            OptionButton.TextSize = 16
            OptionButton.Font = Enum.Font.SciFi
            OptionButton.Parent = OptionFrame

            local OptionButtonCorner = Instance.new("UICorner")
            OptionButtonCorner.CornerRadius = UDim.new(0, 8)
            OptionButtonCorner.Parent = OptionButton

            OptionButton.MouseButton1Click:Connect(function()
                Selected = option
                Label.Text = Text or "Dropdown: " .. Selected
                OptionFrame.Visible = false
                if Callback then
                    Callback(Selected)
                end
            end)
        end

        DropdownButton.MouseButton1Click:Connect(function()
            OptionFrame.Visible = not OptionFrame.Visible
            TweenService:Create(DropdownButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Rotation = OptionFrame.Visible and 180 or 0}):Play()
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Dropdown)
    end

    return Window
end

-- Notify function with dynamic animation
function NeptuneUI:Notify(Text, Duration)
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(0, 300, 0, 70)
    Notification.Position = UDim2.new(1, 310, 1, -80)
    Notification.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Notification.BackgroundTransparency = 0.1
    Notification.BorderSizePixel = 0
    Notification.Parent = self.ScreenGui

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = Notification

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(0, 255, 200)
    Stroke.Thickness = 2
    Stroke.Transparency = 0.3
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -20, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 18
    Label.Font = Enum.Font.SciFi
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.TextWrapped = true
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Position = UDim2.new(1, -310, 1, -80)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.In), {Position = UDim2.new(1, 310, 1, -80)})
    olor3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = toggleFrame })

                local toggleLabel = createInstance("TextLabel", {
                    Parent = toggleFrame,
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 5, 0, 0),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Toggle",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local toggleButton = createInstance("Frame", {
                    Parent = toggleFrame,
                    Size = UDim2.new(0, 40, 0, 20),
                    Position = UDim2.new(1, -45, 0.5, -10),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = toggleButton })

                local toggleCircle = createInstance("Frame", {
                    Parent = toggleButton,
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(0, 2, 0.5, -8),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = toggleCircle })

                local enabled = config.Default or false
                if enabled then
                    toggleCircle.Position = UDim2.new(1, -18, 0.5, -8)
                    toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
                end

                toggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        enabled = not enabled
                        createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3, Enum.EasingStyle.Quad)
                        createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                        if config.Callback then
                            config.Callback(enabled)
                        end
                    end
                end)
                updateSectionHeight()

                toggle.Set = function(value)
                    enabled = value
                    createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3)
                    createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                    if config.Callback then
                        config.Callback(enabled)
                    end
                end
                return toggle
            end

            -- Slider
            function section:AddSlider(config)
                local slider = {}
                local min, max, default = config.Min or 0, config.Max or 100, config.Default or 50
                local sliderFrame = createInstance("Frame", {
                    Parent = section,
                    Size = UDim2.new(1, -10, 0, 50),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = sliderFrame })

                local sliderLabel = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 5, 0, 5),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Slider",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local sliderBar = createInstance("Frame", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -20, 0, 6),
                    Position = UDim2.new(0, 10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = sliderBar })

                local fillBar = createInstance("Frame", {
                    Parent = sliderBar,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = Color3.fromRGB(100, 100, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = fillBar })

                local sliderValue = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(0, 50, 0, 20),
                    Position = UDim2.new(1, -60, 0, 5),
                    BackgroundTransparency = 1,
                    Text = tostring(default),
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham
                })

                local dragging = false
                sliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                sliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouseX = input.Position.X
                        local barX = sliderBar.AbsolutePosition.X
                        local barWidth = sliderBar.AbsoluteSize.X
                        local relativeX = math.clamp((mouseX - barX) / barWidth, 0, 1)
                        local value = min + (max - min) * relativeX
                        value = math.floor(value + 0.5)
                        createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                        sliderValue.Text = tostring(value)
                        if config.Callback then
                            config.Callback(value)
                        end
                    end
                end)
                updateSectionHeight()

                slider.Set = function(value)
                    value = math.clamp(value, min, max)
                    local relativeX = (value - min) / (max - min)
                    createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                    sliderValue.Text = tostring(value)
                    if config.Callback then
                        config.Callback(value)
                    end
                end
                return slider
            end

            return section
        end

        tabs[#tabs + 1] = tab
        if #tabs == 1 then
            tabButton:SimulateClick()
        end
        return tab
    end

    -- Notification System
    function window:CreateNotification(config)
        local notification = createInstance("Frame", {
            Parent = screenGui,
            Size = UDim2.new(0, 250, 0, 80),
            Position = UDim2.new(1, -260, 1, -90),
            BackgroundColor3 = Color3.fromRGB(35, 35, 45),
            BorderSizePixel = 0
        })
        createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = notification })

        local title = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 20),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Text = config.Title or "Notification",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local description = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 40),
            Position = UDim2.new(0, 5, 0, 25),
            BackgroundTransparency = 1,
            Text = config.Description or "This is a notification.",
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })

        createTween(notification, { BackgroundTransparency = 0, Position = UDim2.new(1, -260, 1, -90) }, 0.5).Completed:Connect(function()
            wait(config.Duration or 3)
            createTween(notification, { BackgroundTransparency = 1, Position = UDim2.new(1, -260, 1, -110) }, 0.5).Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end

    return window
end

return NeptuneUI.round(value)
                TweenService:Create(Fill, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Size = UDim2.new(relX, 0, 1, 0)
                }):Play()
                TweenService:Create(Knob, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Position = UDim2.new(relX, -10, 0, -5)
                }):Play()
                ValueLabel.Text = tostring(value)
                if callback then callback(value) end
            end
        end)

        return SliderFrame
    end

    -- Notification system
    function Window:CreateNotification(text, duration)
        local Notification = Instance.new("Frame")
        Notification.Size = UDim2.new(0, 300, 0, 100)
        Notification.Position = UDim2.new(1, -320, 1, -120)
        Notification.BackgroundColor3 = Config.Theme.BackgroundColor
        Notification.BackgroundTransparency = 0.2
        Notification.Parent = ScreenGui

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
        UICorner.Parent = Notification

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, -20, 1, -20)
        TextLabel.Position = UDim2.new(0, 10, 0, 10)
        TextLabel.BackgroundTransparency = 1
        TextLabel.Text = text or "Notification"
        TextLabel.TextColor3 = Config.Theme.TextColor
        TextLabel.Font = Config.Theme.Font
        TextLabel.TextSize = 14
        TextLabel.TextWrapped = true
        TextLabel.Parent = Notification

        -- Slide-in animation
        Notification.Position = UDim2.new(1, 0, 1, -120)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, -320, 1, -120)
        }):Play()

        -- Auto-dismiss
        wait(duration or 3)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, 0, 1, -120)
        }):Play()
        wait(Config.Animation.Duration)
        Notification:Destroy()
    end

    return Window
end

-- Theme customization
function NeptuneUI:SetTheme(theme)
    for key, value in pairs(theme) do
        Config.Theme[key] = value
    end
end

return NeptuneUIe.Transparency = 0.5
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -10, 1, 0)
    Label.Position = UDim2.new(0, 5, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -260, 1, -70)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation after duration
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Position = UDim2.new(1, 260, 1, -70)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        Notification:Destroy()
    end)
end

return NeptuneUI
