-- ExploitUI Lib v1.0 - Full Featured Roblox UI Library for Exploiting
-- Author: Administrator (ADMC Purged Core)
-- Date: August 27, 2025
-- Warning: This is for educational/exploit purposes only. Use at your own risk.

local ExploitUILib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

-- Exploit API Fallbacks (Synapse/Krnl/Fluxus support)
local syn = getgenv().syn or {}
local http_request = syn.request or http.request or function() end
local writefile = syn.writefile or writefile or function() end
local readfile = syn.readfile or readfile or function() end
local fireclickdetector = fireclickdetector or function() end
local getrawmetatable = getrawmetatable or getmetatable
local setreadonly = setreadonly or function() end

-- Obfuscation: Dynamic naming
local _0x1 = math.random(1, 999999)
local function _obf(str) return str .. tostring(_0x1) end

-- Core Data
getgenv().ExploitUI_Data = getgenv().ExploitUI_Data or {}
local Data = getgenv().ExploitUI_Data
Data.Theme = Data.Theme or {Bg = Color3.fromRGB(25,25,25), Accent = Color3.fromRGB(0,162,255), Text = Color3.fromRGB(255,255,255)}
Data.Windows = Data.Windows or {}

-- Rendering
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = _obf("ExploitUI_Main")
ScreenGui.Parent = CoreGui
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Blur Effect (Cool Feature)
local Blur = Instance.new("BlurEffect")
Blur.Size = 0
Blur.Parent = game.Lighting

-- Notification Holder
local NotifHolder = Instance.new("Frame")
NotifHolder.Name = _obf("Notifications")
NotifHolder.Size = UDim2.new(0, 300, 1, 0)
NotifHolder.Position = UDim2.new(1, -310, 0, 0)
NotifHolder.BackgroundTransparency = 1
NotifHolder.Parent = ScreenGui

-- Function: Create Notification
function ExploitUILib:Notify(title, text, duration)
    duration = duration or 3
    local Notif = Instance.new("Frame")
    Notif.Size = UDim2.new(0, 300, 0, 80)
    Notif.Position = UDim2.new(0, 0, 0, #NotifHolder:GetChildren() * 90)
    Notif.BackgroundColor3 = Data.Theme.Bg
    Notif.BorderSizePixel = 0
    Notif.Parent = NotifHolder
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0.5, 0)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.TextColor3 = Data.Theme.Accent
    Title.TextSize = 14
    Title.Font = Enum.Font.GothamBold
    Title.Parent = Notif
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Size = UDim2.new(1, 0, 0.5, 0)
    TextLabel.Position = UDim2.new(0, 0, 0.5, 0)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = text
    TextLabel.TextColor3 = Data.Theme.Text
    TextLabel.TextSize = 12
    TextLabel.Font = Enum.Font.Gotham
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = Notif
    
    -- Animate in
    local TweenIn = TweenService:Create(Notif, TweenInfo.new(0.3), {Position = UDim2.new(0, 0, 0, (#NotifHolder:GetChildren() - 1) * 90)})
    TweenIn:Play()
    
    -- Fade out
    wait(duration)
    local TweenOut = TweenService:Create(Notif, TweenInfo.new(0.3), {BackgroundTransparency = 1})
    TweenOut:Play()
    TweenOut.Completed:Connect(function() Notif:Destroy() end)
end

-- Draggable Function (Core Feature)
local function MakeDraggable(frame)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Resizable Function (Core Feature)
local function MakeResizable(frame, minSize)
    minSize = minSize or UDim2.new(0, 200, 0, 150)
    local resizing = false
    local resizeHandle = Instance.new("Frame")
    resizeHandle.Size = UDim2.new(0, 10, 0, 10)
    resizeHandle.Position = UDim2.new(1, -10, 1, -10)
    resizeHandle.BackgroundColor3 = Color3.fromRGB(100,100,100)
    resizeHandle.BorderSizePixel = 0
    resizeHandle.Parent = frame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = resizeHandle
    
    resizeHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = true
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - resizeHandle.AbsolutePosition
            local newSize = UDim2.new(0, math.max(minSize.X.Offset, frame.AbsoluteSize.X + delta.X), 0, math.max(minSize.Y.Offset, frame.AbsoluteSize.Y + delta.Y))
            frame.Size = newSize
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)
end

-- Window Creation (Core)
function ExploitUILib:CreateWindow(name)
    local Window = Instance.new("Frame")
    Window.Name = _obf("Window_" .. name)
    Window.Size = UDim2.new(0, 500, 0, 400)
    Window.Position = UDim2.new(0.5, -250, 0.5, -200)
    Window.BackgroundColor3 = Data.Theme.Bg
    Window.BorderSizePixel = 0
    Window.Parent = ScreenGui
    
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = _obf("TitleBar")
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Data.Theme.Accent
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = Window
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -60, 1, 0)
    Title.BackgroundTransparency = 1
    Title.Text = name
    Title.TextColor3 = Data.Theme.Text
    Title.TextSize = 14
    Title.Font = Enum.Font.GothamBold
    Title.Parent = TitleBar
    
    -- Close Button
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Size = UDim2.new(0, 30, 1, 0)
    CloseBtn.Position = UDim2.new(1, -30, 0, 0)
    CloseBtn.BackgroundTransparency = 1
    CloseBtn.Text = "X"
    CloseBtn.TextColor3 = Color3.fromRGB(255,0,0)
    CloseBtn.TextSize = 14
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.Parent = TitleBar
    
    CloseBtn.MouseButton1Click:Connect(function()
        Window:Destroy()
        -- Panic: Clear traces (Exploit Feature)
        if syn then syn.clearevents() end  -- Hypothetical clear
        ExploitUILib:Notify("UI Closed", "Window destroyed. Traces cleared.", 2)
    end)
    
    -- Minimize Button (Cool Feature)
    local MinBtn = Instance.new("TextButton")
    MinBtn.Size = UDim2.new(0, 30, 1, 0)
    MinBtn.Position = UDim2.new(1, -60, 0, 0)
    MinBtn.BackgroundTransparency = 1
    MinBtn.Text = "-"
    MinBtn.TextColor3 = Data.Theme.Text
    MinBtn.TextSize = 14
    MinBtn.Font = Enum.Font.GothamBold
    MinBtn.Parent = TitleBar
    
    local minimized = false
    MinBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        local targetSize = minimized and UDim2.new(1, 0, 0, 30) or UDim2.new(0, 500, 0, 400)
        local tween = TweenService:Create(Window, TweenInfo.new(0.2), {Size = targetSize})
        tween:Play()
    end)
    
    MakeDraggable(TitleBar)
    MakeResizable(Window)
    
    -- Content Frame
    local Content = Instance.new("Frame")
    Content.Name = _obf("Content")
    Content.Size = UDim2.new(1, 0, 1, -30)
    Content.Position = UDim2.new(0, 0, 0, 30)
    Content.BackgroundTransparency = 1
    Content.Parent = Window
    
    -- Tab System
    local TabHolder = Instance.new("Frame")
    TabHolder.Size = UDim2.new(0, 150, 1, 0)
    TabHolder.BackgroundColor3 = Color3.fromRGB(35,35,35)
    TabHolder.BorderSizePixel = 0
    TabHolder.Parent = Content
    
    local TabContent = Instance.new("Frame")
    TabContent.Size = UDim2.new(1, -150, 1, 0)
    TabContent.Position = UDim2.new(0, 150, 0, 0)
    TabContent.BackgroundTransparency = 1
    TabContent.Parent = Content
    
    local CurrentTab = nil
    
    -- Create Tab Function
    function Window:CreateTab(name)
        local TabBtn = Instance.new("TextButton")
        TabBtn.Size = UDim2.new(1, 0, 0, 30)
        TabBtn.BackgroundColor3 = Color3.fromRGB(45,45,45)
        TabBtn.BorderSizePixel = 0
        TabBtn.Text = name
        TabBtn.TextColor3 = Data.Theme.Text
        TabBtn.TextSize = 12
        TabBtn.Font = Enum.Font.Gotham
        TabBtn.Parent = TabHolder
        
        local TabFrame = Instance.new("ScrollingFrame")
        TabFrame.Size = UDim2.new(1, 0, 1, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.BorderSizePixel = 0
        TabFrame.ScrollBarThickness = 5
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabFrame.Visible = false
        TabFrame.Parent = TabContent
        
        TabBtn.MouseButton1Click:Connect(function()
            if CurrentTab then CurrentTab.Visible = false end
            CurrentTab = TabFrame
            CurrentTab.Visible = true
            for _, btn in pairs(TabHolder:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = Color3.fromRGB(45,45,45)
                end
            end
            TabBtn.BackgroundColor3 = Data.Theme.Accent
        end)
        
        -- If first tab, activate
        if not CurrentTab then
            TabBtn.MouseButton1Click:Fire()
        end
        
        local SectionY = 0
        
        -- Section Creation
        function TabFrame:CreateSection(name)
            local Section = Instance.new("Frame")
            Section.Size = UDim2.new(1, -10, 0, 30)
            Section.Position = UDim2.new(0, 5, 0, SectionY)
            Section.BackgroundColor3 = Color3.fromRGB(40,40,40)
            Section.BorderSizePixel = 0
            Section.Parent = TabFrame
            
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Size = UDim2.new(1, 0, 1, 0)
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Text = name
            SectionTitle.TextColor3 = Data.Theme.Accent
            SectionTitle.TextSize = 12
            SectionTitle.Font = Enum.Font.GothamBold
            SectionTitle.Parent = Section
            
            SectionY = SectionY + 35
            TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
            
            local SectionContent = Instance.new("Frame")
            SectionContent.Size = UDim2.new(1, -10, 0, 0)
            SectionContent.Position = UDim2.new(0, 5, 1, 0)
            SectionContent.BackgroundTransparency = 1
            SectionContent.Parent = Section
            
            local SectionContentY = 0
            
            return SectionContent
        end
        
        return TabFrame
    end
    
    -- UI Elements
    local Elements = {}
    
    -- Button (Core)
    function TabFrame:AddButton(text, callback)
        local Btn = Instance.new("TextButton")
        Btn.Size = UDim2.new(1, -10, 0, 30)
        Btn.Position = UDim2.new(0, 5, 0, SectionY)  -- Assuming in section, adjust if needed
        Btn.BackgroundColor3 = Data.Theme.Accent
        Btn.BorderSizePixel = 0
        Btn.Text = text
        Btn.TextColor3 = Data.Theme.Text
        Btn.TextSize = 12
        Btn.Font = Enum.Font.Gotham
        Btn.Parent = TabFrame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 4)
        corner.Parent = Btn
        
        Btn.MouseButton1Click:Connect(callback)
        
        SectionY = SectionY + 35
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        table.insert(Elements, Btn)
        return Btn
    end
    
    -- Toggle (Core)
    function TabFrame:AddToggle(text, default, callback)
        default = default or false
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
        ToggleFrame.Position = UDim2.new(0, 5, 0, SectionY)
        ToggleFrame.BackgroundTransparency = 1
        ToggleFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -50, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = ToggleFrame
        
        local Toggle = Instance.new("TextButton")
        Toggle.Size = UDim2.new(0, 40, 0, 20)
        Toggle.Position = UDim2.new(1, -45, 0.5, -10)
        Toggle.BackgroundColor3 = default and Data.Theme.Accent or Color3.fromRGB(60,60,60)
        Toggle.BorderSizePixel = 0
        Toggle.Text = ""
        Toggle.Parent = ToggleFrame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = Toggle
        
        local state = default
        Toggle.MouseButton1Click:Connect(function()
            state = not state
            Toggle.BackgroundColor3 = state and Data.Theme.Accent or Color3.fromRGB(60,60,60)
            callback(state)
        end)
        
        SectionY = SectionY + 35
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        table.insert(Elements, Toggle)
        return Toggle
    end
    
    -- Slider (Core)
    function TabFrame:AddSlider(text, min, max, default, callback)
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Size = UDim2.new(1, -10, 0, 50)
        SliderFrame.Position = UDim2.new(0, 5, 0, SectionY)
        SliderFrame.BackgroundTransparency = 1
        SliderFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0.5, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text .. ": " .. default
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.Parent = SliderFrame
        
        local Slider = Instance.new("Frame")
        Slider.Size = UDim2.new(1, 0, 0, 5)
        Slider.Position = UDim2.new(0, 0, 0.6, 0)
        Slider.BackgroundColor3 = Color3.fromRGB(50,50,50)
        Slider.BorderSizePixel = 0
        Slider.Parent = SliderFrame
        
        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        Fill.BackgroundColor3 = Data.Theme.Accent
        Fill.BorderSizePixel = 0
        Fill.Parent = Slider
        
        local Knob = Instance.new("Frame")
        Knob.Size = UDim2.new(0, 10, 0, 10)
        Knob.Position = UDim2.new((default - min) / (max - min), -5, 0.5, -5)
        Knob.BackgroundColor3 = Data.Theme.Accent
        Knob.BorderSizePixel = 0
        Knob.Parent = Slider
        
        local cornerFill = Instance.new("UICorner")
        cornerFill.CornerRadius = UDim.new(0, 2)
        cornerFill.Parent = Fill
        
        local dragging = false
        Knob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local percent = math.clamp((input.Position.X - Slider.AbsolutePosition.X) / Slider.AbsoluteSize.X, 0, 1)
                local value = math.floor(min + (max - min) * percent)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Knob.Position = UDim2.new(percent, -5, 0.5, -5)
                Label.Text = text .. ": " .. value
                callback(value)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        SectionY = SectionY + 55
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        return Slider
    end
    
    -- Dropdown (Core)
    function TabFrame:AddDropdown(text, options, default, callback)
        local DropdownFrame = Instance.new("Frame")
        DropdownFrame.Size = UDim2.new(1, -10, 0, 30)
        DropdownFrame.Position = UDim2.new(0, 5, 0, SectionY)
        DropdownFrame.BackgroundTransparency = 1
        DropdownFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -100, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = DropdownFrame
        
        local DropdownBtn = Instance.new("TextButton")
        DropdownBtn.Size = UDim2.new(0, 100, 1, 0)
        DropdownBtn.Position = UDim2.new(1, -105, 0, 0)
        DropdownBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
        DropdownBtn.BorderSizePixel = 0
        DropdownBtn.Text = default or options[1] or "Select"
        DropdownBtn.TextColor3 = Data.Theme.Text
        DropdownBtn.TextSize = 12
        DropdownBtn.Font = Enum.Font.Gotham
        DropdownBtn.Parent = DropdownFrame
        
        local ListFrame = Instance.new("Frame")
        ListFrame.Size = UDim2.new(0, 100, 0, #options * 25)
        ListFrame.Position = UDim2.new(1, -105, 1, 0)
        ListFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
        ListFrame.BorderSizePixel = 0
        ListFrame.Visible = false
        ListFrame.Parent = DropdownFrame
        
        local ListLayout = Instance.new("UIListLayout")
        ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ListLayout.Parent = ListFrame
        
        for i, opt in ipairs(options) do
            local OptBtn = Instance.new("TextButton")
            OptBtn.Size = UDim2.new(1, 0, 0, 25)
            OptBtn.BackgroundTransparency = 1
            OptBtn.Text = opt
            OptBtn.TextColor3 = Data.Theme.Text
            OptBtn.TextSize = 12
            OptBtn.Font = Enum.Font.Gotham
            OptBtn.Parent = ListFrame
            
            OptBtn.MouseButton1Click:Connect(function()
                DropdownBtn.Text = opt
                callback(opt)
                ListFrame.Visible = false
            end)
        end
        
        DropdownBtn.MouseButton1Click:Connect(function()
            ListFrame.Visible = not ListFrame.Visible
        end)
        
        -- Cool: Autocomplete (Searchable)
        local SearchBox = Instance.new("TextBox")
        SearchBox.Size = UDim2.new(1, 0, 0, 25)
        SearchBox.Position = UDim2.new(0, 0, 0, -25)
        SearchBox.BackgroundColor3 = Color3.fromRGB(50,50,50)
        SearchBox.BorderSizePixel = 0
        SearchBox.PlaceholderText = "Search..."
        SearchBox.TextColor3 = Data.Theme.Text
        SearchBox.TextSize = 12
        SearchBox.Font = Enum.Font.Gotham
        SearchBox.Visible = false
        SearchBox.Parent = ListFrame
        
        DropdownBtn.MouseButton1Click:Connect(function()
            ListFrame.Visible = not ListFrame.Visible
            if ListFrame.Visible the
