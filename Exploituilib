-- Rule34ThemedUILibrary.lua
-- Enhanced Roblox UI library with Rule34-inspired themes (sexy red/black/pink, purple/neon, and dark crimson).
-- Features: Tabs, dropdowns, sliders, text input, customizable themes, minimize/maximize, keybinds, smooth animations,
-- custom notifications, mobile-compatible, draggable, toggle hide/show.
-- Usage: Load via loadstring or require as a ModuleScript.

local function CreateUILibrary()
    local TweenService = game:GetService("TweenService")
    local UserInputService = game:GetService("UserInputService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

    local Library = {}
    Library.Themes = {
        Seductive = {
            Background = Color3.fromRGB(30, 0, 30), -- Dark purple/black
            Accent = Color3.fromRGB(255, 0, 128), -- Hot pink
            Text = Color3.fromRGB(255, 255, 255),
            Border = Color3.fromRGB(255, 0, 0),
            ButtonHover = Color3.fromRGB(200, 0, 100),
            ToggleOn = Color3.fromRGB(255, 100, 150),
            ToggleOff = Color3.fromRGB(100, 0, 50)
        },
        NeonLust = {
            Background = Color3.fromRGB(10, 0, 20),
            Accent = Color3.fromRGB(255, 0, 255),
            Text = Color3.fromRGB(200, 200, 255),
            Border = Color3.fromRGB(100, 0, 200),
            ButtonHover = Color3.fromRGB(150, 0, 150),
            ToggleOn = Color3.fromRGB(200, 100, 200),
            ToggleOff = Color3.fromRGB(50, 0, 50)
        },
        CrimsonDesire = {
            Background = Color3.fromRGB(50, 0, 0),
            Accent = Color3.fromRGB(200, 0, 0),
            Text = Color3.fromRGB(255, 200, 200),
            Border = Color3.fromRGB(150, 0, 0),
            ButtonHover = Color3.fromRGB(180, 0, 0),
            ToggleOn = Color3.fromRGB(220, 50, 50),
            ToggleOff = Color3.fromRGB(80, 0, 0)
        }
    }
    Library.CurrentTheme = Library.Themes.Seductive
    Library.ScreenGui = nil
    Library.MainWindow = nil
    Library.Hidden = false
    Library.Minimized = false
    Library.ToggleButton = nil
    Library.Notifications = {}

    -- Helper function for tweens
    local function Tween(object, properties, time, style)
        local tweenInfo = TweenInfo.new(time or 0.3, style or Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(object, tweenInfo, properties)
        tween:Play()
        return tween
    end

    -- Draggable functionality
    local function MakeDraggable(frame)
        local dragging = false
        local dragInput
        local dragStart
        local startPos

        local function update(input)
            local delta = input.Position - dragStart
            Tween(frame, {Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)}, 0.1)
        end

        frame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        frame.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end

    -- Initialize library
    function Library:Init()
        if self.ScreenGui then return end
        
        self.ScreenGui = Instance.new("ScreenGui")
        self.ScreenGui.Parent = PlayerGui
        self.ScreenGui.Name = "Rule34UILibrary"
        self.ScreenGui.ResetOnSpawn = false
        self.ScreenGui.IgnoreGuiInset = true
        self.ScreenGui.DisplayOrder = 1000 -- Ensure it renders above other GUIs

        -- Toggle button
        self.ToggleButton = Instance.new("TextButton")
        self.ToggleButton.Size = UDim2.new(0, 50, 0, 50)
        self.ToggleButton.Position = UDim2.new(1, -60, 0, 10)
        self.ToggleButton.BackgroundColor3 = self.CurrentTheme.Accent
        self.ToggleButton.Text = "ðŸ‘€"
        self.ToggleButton.TextColor3 = self.CurrentTheme.Text
        self.ToggleButton.Font = Enum.Font.GothamBold
        self.ToggleButton.TextSize = 18
        self.ToggleButton.Parent = self.ScreenGui
        self.ToggleButton.BorderColor3 = self.CurrentTheme.Border
        self.ToggleButton.BorderSizePixel = 2
        MakeDraggable(self.ToggleButton)

        self.ToggleButton.MouseButton1Click:Connect(function()
            self:ToggleVisibility()
        end)

        -- Notification container
        local notificationContainer = Instance.new("Frame")
        notificationContainer.Size = UDim2.new(0, 300, 1, 0)
        notificationContainer.Position = UDim2.new(1, -310, 0, 0)
        notificationContainer.BackgroundTransparency = 1
        notificationContainer.Parent = self.ScreenGui
        local uiListLayout = Instance.new("UIListLayout")
        uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        uiListLayout.Padding = UDim.new(0, 10)
        uiListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
        uiListLayout.Parent = notificationContainer
    end

    -- Toggle visibility
    function Library:ToggleVisibility()
        if not self.MainWindow then return end
        self.Hidden = not self.Hidden
        if self.Hidden then
            Tween(self.MainWindow, {Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0, 0, 0, 0)}, 0.5, Enum.EasingStyle.Back)
            task.wait(0.5)
            self.MainWindow.Visible = false
        else
            self.MainWindow.Visible = true
            self.Minimized = false
            Tween(self.MainWindow, {Position = UDim2.new(0.5, 0, 0.5, 0), Size = UDim2.new(0, 400, 0, 300)}, 0.5, Enum.EasingStyle.Back)
        end
    end

    -- Minimize/maximize window
    function Library:Minimize()
        if not self.MainWindow or self.Hidden then return end
        self.Minimized = not self.Minimized
        if self.Minimized then
            Tween(self.MainWindow, {Size = UDim2.new(0, 400, 0, 30)}, 0.3, Enum.EasingStyle.Sine)
        else
            Tween(self.MainWindow, {Size = UDim2.new(0, 400, 0, 300)}, 0.3, Enum.EasingStyle.Sine)
        end
    end

    -- Create main window with tabs
    function Library:CreateWindow(title)
        self:Init()
        
        self.MainWindow = Instance.new("Frame")
        self.MainWindow.Size = UDim2.new(0, 400, 0, 300)
        self.MainWindow.Position = UDim2.new(0.5, 0, 0.5, 0)
        self.MainWindow.BackgroundColor3 = self.CurrentTheme.Background
        self.MainWindow.BorderColor3 = self.CurrentTheme.Border
        self.MainWindow.BorderSizePixel = 2
        self.MainWindow.Parent = self.ScreenGui
        MakeDraggable(self.MainWindow)

        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0, 30)
        titleLabel.BackgroundColor3 = self.CurrentTheme.Accent
        titleLabel.Text = title or "Rule34 Hub"
        titleLabel.TextColor3 = self.CurrentTheme.Text
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.TextSize = 18
        titleLabel.Parent = self.MainWindow

        local minimizeButton = Instance.new("TextButton")
        minimizeButton.Size = UDim2.new(0, 30, 0, 30)
        minimizeButton.Position = UDim2.new(1, -40, 0, 0)
        minimizeButton.BackgroundColor3 = self.CurrentTheme.Accent
        minimizeButton.Text = "-"
        minimizeButton.TextColor3 = self.CurrentTheme.Text
        minimizeButton.Parent = titleLabel
        minimizeButton.MouseButton1Click:Connect(function()
            self:Minimize()
        end)

        local tabContainer = Instance.new("Frame")
        tabContainer.Size = UDim2.new(1, 0, 0, 30)
        tabContainer.Position = UDim2.new(0, 0, 0, 30)
        tabContainer.BackgroundColor3 = self.CurrentTheme.Background
        tabContainer.BorderColor3 = self.CurrentTheme.Border
        tabContainer.Parent = self.MainWindow

        local contentFrame = Instance.new("Frame")
        contentFrame.Size = UDim2.new(1, 0, 1, -60)
        contentFrame.Position = UDim2.new(0, 0, 0, 60)
        contentFrame.BackgroundTransparency = 1
        contentFrame.Parent = self.MainWindow

        local tabs = {}
        local currentTab = nil

        local function selectTab(tabButton, tabContent)
            if currentTab == tabButton then return end
            if currentTab then
                Tween(currentTab, {BackgroundColor3 = self.CurrentTheme.Background})
                tabs[currentTab].Content.Visible = false
            end
            currentTab = tabButton
            Tween(tabButton, {BackgroundColor3 = self.CurrentTheme.Accent})
            tabContent.Visible = true
        end

        function Library:AddTab(name)
            local tabButton = Instance.new("TextButton")
            tabButton.Size = UDim2.new(0, 100, 1, 0)
            tabButton.Position = UDim2.new(0, #tabs * 100, 0, 0)
            tabButton.BackgroundColor3 = self.CurrentTheme.Background
            tabButton.Text = name or "Tab"
            tabButton.TextColor3 = self.CurrentTheme.Text
            tabButton.Font = Enum.Font.Gotham
            tabButton.TextSize = 14
            tabButton.Parent = tabContainer

            local tabContent = Instance.new("ScrollingFrame")
            tabContent.Size = UDim2.new(1, 0, 1, 0)
            tabContent.BackgroundTransparency = 1
            tabContent.ScrollBarThickness = 5
            tabContent.Visible = false
            tabContent.Parent = contentFrame
            local uiListLayout = Instance.new("UIListLayout")
            uiListLayout.Padding = UDim.new(0, 5)
            uiListLayout.Parent = tabContent

            tabs[tabButton] = {Content = tabContent}
            tabButton.MouseButton1Click:Connect(function()
                selectTab(tabButton, tabContent)
            end)

            if not currentTab then
                selectTab(tabButton, tabContent)
            end

            return tabContent
        end

        return self:AddTab("Main")
    end

    -- Add button
    function Library:AddButton(parent, text, callback)
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, -10, 0, 40)
        button.Position = UDim2.new(0, 5, 0, 0)
        button.BackgroundColor3 = self.CurrentTheme.Accent
        button.Text = text or "Seduce Me"
        button.TextColor3 = self.CurrentTheme.Text
        button.Font = Enum.Font.Gotham
        button.TextSize = 16
        button.BorderColor3 = self.CurrentTheme.Border
        button.BorderSizePixel = 1
        button.Parent = parent

        button.MouseEnter:Connect(function()
            Tween(button, {BackgroundColor3 = self.CurrentTheme.ButtonHover})
        end)
        button.MouseLeave:Connect(function()
            Tween(button, {BackgroundColor3 = self.CurrentTheme.Accent})
        end)
        button.MouseButton1Click:Connect(callback or function() end)

        return button
    end

    -- Add toggle
    function Library:AddToggle(parent, text, default, callback)
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(1, -10, 0, 40)
        toggleFrame.Position = UDim2.new(0, 5, 0, 0)
        toggleFrame.BackgroundTransparency = 1
        toggleFrame.Parent = parent

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.8, 0, 1, 0)
        label.BackgroundTransparency = 1
        label.Text = text or "Enable Lust Mode"
        label.TextColor3 = self.CurrentTheme.Text
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = toggleFrame

        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0, 30, 0, 20)
        toggleButton.Position = UDim2.new(1, -35, 0.5, -10)
        toggleButton.BackgroundColor3 = default and self.CurrentTheme.ToggleOn or self.CurrentTheme.ToggleOff
        toggleButton.Text = ""
        toggleButton.Parent = toggleFrame

        local state = default
        toggleButton.MouseButton1Click:Connect(function()
            state = not state
            Tween(toggleButton, {BackgroundColor3 = state and self.CurrentTheme.ToggleOn or self.CurrentTheme.ToggleOff})
            if callback then callback(state) end
        end)

        return toggleButton
    end

    -- Add dropdown
    function Library:AddDropdown(parent, text, options, callback)
        local dropdownFrame = Instance.new("Frame")
        dropdownFrame.Size = UDim2.new(1, -10, 0, 40)
        dropdownFrame.Position = UDim2.new(0, 5, 0, 0)
        dropdownFrame.BackgroundTransparency = 1
        dropdownFrame.Parent = parent

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.8, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.Text = text or "Select Desire"
        label.TextColor3 = self.CurrentTheme.Text
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = dropdownFrame

        local dropdownButton = Instance.new("TextButton")
        dropdownButton.Size = UDim2.new(1, 0, 0, 20)
        dropdownButton.Position = UDim2.new(0, 0, 0, 20)
        dropdownButton.BackgroundColor3 = self.CurrentTheme.Accent
        dropdownButton.Text = options[1] or "Select"
        dropdownButton.TextColor3 = self.CurrentTheme.Text
        dropdownButton.Font = Enum.Font.Gotham
        dropdownButton.TextSize = 14
        dropdownButton.Parent = dropdownFrame

        local dropdownList = Instance.new("Frame")
        dropdownList.Size = UDim2.new(1, 0, 0, 0)
        dropdownList.Position = UDim2.new(0, 0, 0, 40)
        dropdownList.BackgroundColor3 = self.CurrentTheme.Background
        dropdownList.BorderColor3 = self.CurrentTheme.Border
        dropdownList.Visible = false
        dropdownList.Parent = dropdownFrame
        local uiListLayout = Instance.new("UIListLayout")
        uiListLayout.Parent = dropdownList

        local function updateList()
            dropdownList.Size = UDim2.new(1, 0, 0, #options * 20)
            for _, child in ipairs(dropdownList:GetChildren()) do
                if child:IsA("TextButton") then child:Destroy() end
            end
            for i, option in ipairs(options) do
                local optionButton = Instance.new("TextButton")
                optionButton.Size = UDim2.new(1, 0, 0, 20)
                optionButton.BackgroundColor3 = self.CurrentTheme.Accent
                optionButton.Text = option
                optionButton.TextColor3 = self.CurrentTheme.Text
                optionButton.Font = Enum.Font.Gotham
                optionButton.TextSize = 14
                optionButton.Parent = dropdownList
                optionButton.MouseButton1Click:Connect(function()
                    dropdownButton.Text = option
                    dropdownList.Visible = false
                    if callback then callback(option) end
                end)
            end
        end

        updateList()
        dropdownButton.MouseButton1Click:Connect(function()
            dropdownList.Visible = not dropdownList.Visible
            Tween(dropdownList, {Size = dropdownList.Visible and UDim2.new(1, 0, 0, #options * 20) or UDim2.new(1, 0, 0, 0)}, 0.3)
        end)

        return dropdownButton, updateList
    end

    -- Add slider
    function Library:AddSlider(parent, text, min, max, default, callback)
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Size = UDim2.new(1, -10, 0, 60)
        sliderFrame.Position = UDim2.new(0, 5, 0, 0)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Parent = parent

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(1, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.Text = text or "Intensity"
        label.TextColor3 = self.CurrentTheme.Text
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = sliderFrame

        local sliderBar = Instance.new("Frame")
        sliderBar.Size = UDim2.new(1, 0, 0, 10)
        sliderBar.Position = UDim2.new(0, 0, 0, 30)
        sliderBar.BackgroundColor3 = self.CurrentTheme.ToggleOff
        sliderBar.Parent = sliderFrame

        local fill = Instance.new("Frame")
        fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        fill.BackgroundColor3 = self.CurrentTheme.ToggleOn
        fill.Parent = sliderBar

        local valueLabel = Instance.new("TextLabel")
        valueLabel.Size = UDim2.new(0, 50, 0, 20)
        valueLabel.Position = UDim2.new(1, -60, 0, 10)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Text = tostring(default)
        valueLabel.TextColor3 = self.CurrentTheme.Text
        valueLabel.Font = Enum.Font.Gotham
        valueLabel.TextSize = 14
        valueLabel.Parent = sliderFrame

        local function updateSlider(input)
            local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
            local value = math.floor(min + (max - min) * relativeX)
            Tween(fill, {Size = UDim2.new(relativeX, 0, 1, 0)}, 0.1)
            valueLabel.Text = tostring(value)
            if callback then callback(value) end
        end

        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
            end
        end)

        sliderBar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
            end
        end)

        return sliderBar
    end

    -- Add text input
    function Library:AddTextInput(parent, text, callback)
        local inputFrame = Instance.new("Frame")
        inputFrame.Size = UDim2.new(1, -10, 0, 40)
        inputFrame.Position = UDim2.new(0, 5, 0, 0)
        inputFrame.BackgroundTransparency = 1
        inputFrame.Parent = parent

        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.8, 0, 0, 20)
        label.BackgroundTransparency = 1
        label.Text = text or "Enter Desire"
        label.TextColor3 = self.CurrentTheme.Text
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = inputFrame

        local textBox = Instance.new("TextBox")
        textBox.Size = UDim2.new(1, 0, 0, 20)
        textBox.Position = UDim2.new(0, 0, 0, 20)
        textBox.BackgroundColor3 = self.CurrentTheme.Accent
        textBox.Text = ""
        textBox.TextColor3 = self.CurrentTheme.Text
        textBox.Font = Enum.Font.Gotham
        textBox.TextSize = 14
        textBox.Parent = inputFrame

        textBox.FocusLost:Connect(function(enterPressed)
            if enterPressed and callback then
                callback(textBox.Text)
            end
        end)

        return textBox
    end

    -- Add keybind
    function Library:AddKeybind(parent, text, defaultKey, callback)
        local keybindFrame = Instance.new("Frame")
        keybindFrame.Size = UDim2.new(1, -10,        
        -- If first tab, activate
        if not CurrentTab then
            TabBtn.MouseButton1Click:Fire()
        end
        
        local SectionY = 0
        
        -- Section Creation
        function TabFrame:CreateSection(name)
            local Section = Instance.new("Frame")
            Section.Size = UDim2.new(1, -10, 0, 30)
            Section.Position = UDim2.new(0, 5, 0, SectionY)
            Section.BackgroundColor3 = Color3.fromRGB(40,40,40)
            Section.BorderSizePixel = 0
            Section.Parent = TabFrame
            
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Size = UDim2.new(1, 0, 1, 0)
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Text = name
            SectionTitle.TextColor3 = Data.Theme.Accent
            SectionTitle.TextSize = 12
            SectionTitle.Font = Enum.Font.GothamBold
            SectionTitle.Parent = Section
            
            SectionY = SectionY + 35
            TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
            
            local SectionContent = Instance.new("Frame")
            SectionContent.Size = UDim2.new(1, -10, 0, 0)
            SectionContent.Position = UDim2.new(0, 5, 1, 0)
            SectionContent.BackgroundTransparency = 1
            SectionContent.Parent = Section
            
            local SectionContentY = 0
            
            return SectionContent
        end
        
        return TabFrame
    end
    
    -- UI Elements
    local Elements = {}
    
    -- Button (Core)
    function TabFrame:AddButton(text, callback)
        local Btn = Instance.new("TextButton")
        Btn.Size = UDim2.new(1, -10, 0, 30)
        Btn.Position = UDim2.new(0, 5, 0, SectionY)  -- Assuming in section, adjust if needed
        Btn.BackgroundColor3 = Data.Theme.Accent
        Btn.BorderSizePixel = 0
        Btn.Text = text
        Btn.TextColor3 = Data.Theme.Text
        Btn.TextSize = 12
        Btn.Font = Enum.Font.Gotham
        Btn.Parent = TabFrame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 4)
        corner.Parent = Btn
        
        Btn.MouseButton1Click:Connect(callback)
        
        SectionY = SectionY + 35
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        table.insert(Elements, Btn)
        return Btn
    end
    
    -- Toggle (Core)
    function TabFrame:AddToggle(text, default, callback)
        default = default or false
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
        ToggleFrame.Position = UDim2.new(0, 5, 0, SectionY)
        ToggleFrame.BackgroundTransparency = 1
        ToggleFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -50, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = ToggleFrame
        
        local Toggle = Instance.new("TextButton")
        Toggle.Size = UDim2.new(0, 40, 0, 20)
        Toggle.Position = UDim2.new(1, -45, 0.5, -10)
        Toggle.BackgroundColor3 = default and Data.Theme.Accent or Color3.fromRGB(60,60,60)
        Toggle.BorderSizePixel = 0
        Toggle.Text = ""
        Toggle.Parent = ToggleFrame
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = Toggle
        
        local state = default
        Toggle.MouseButton1Click:Connect(function()
            state = not state
            Toggle.BackgroundColor3 = state and Data.Theme.Accent or Color3.fromRGB(60,60,60)
            callback(state)
        end)
        
        SectionY = SectionY + 35
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        table.insert(Elements, Toggle)
        return Toggle
    end
    
    -- Slider (Core)
    function TabFrame:AddSlider(text, min, max, default, callback)
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Size = UDim2.new(1, -10, 0, 50)
        SliderFrame.Position = UDim2.new(0, 5, 0, SectionY)
        SliderFrame.BackgroundTransparency = 1
        SliderFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0.5, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text .. ": " .. default
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.Parent = SliderFrame
        
        local Slider = Instance.new("Frame")
        Slider.Size = UDim2.new(1, 0, 0, 5)
        Slider.Position = UDim2.new(0, 0, 0.6, 0)
        Slider.BackgroundColor3 = Color3.fromRGB(50,50,50)
        Slider.BorderSizePixel = 0
        Slider.Parent = SliderFrame
        
        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        Fill.BackgroundColor3 = Data.Theme.Accent
        Fill.BorderSizePixel = 0
        Fill.Parent = Slider
        
        local Knob = Instance.new("Frame")
        Knob.Size = UDim2.new(0, 10, 0, 10)
        Knob.Position = UDim2.new((default - min) / (max - min), -5, 0.5, -5)
        Knob.BackgroundColor3 = Data.Theme.Accent
        Knob.BorderSizePixel = 0
        Knob.Parent = Slider
        
        local cornerFill = Instance.new("UICorner")
        cornerFill.CornerRadius = UDim.new(0, 2)
        cornerFill.Parent = Fill
        
        local dragging = false
        Knob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local percent = math.clamp((input.Position.X - Slider.AbsolutePosition.X) / Slider.AbsoluteSize.X, 0, 1)
                local value = math.floor(min + (max - min) * percent)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Knob.Position = UDim2.new(percent, -5, 0.5, -5)
                Label.Text = text .. ": " .. value
                callback(value)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        SectionY = SectionY + 55
        TabFrame.CanvasSize = UDim2.new(0, 0, 0, SectionY)
        
        return Slider
    end
    
    -- Dropdown (Core)
    function TabFrame:AddDropdown(text, options, default, callback)
        local DropdownFrame = Instance.new("Frame")
        DropdownFrame.Size = UDim2.new(1, -10, 0, 30)
        DropdownFrame.Position = UDim2.new(0, 5, 0, SectionY)
        DropdownFrame.BackgroundTransparency = 1
        DropdownFrame.Parent = TabFrame
        
        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -100, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Text = text
        Label.TextColor3 = Data.Theme.Text
        Label.TextSize = 12
        Label.Font = Enum.Font.Gotham
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = DropdownFrame
        
        local DropdownBtn = Instance.new("TextButton")
        DropdownBtn.Size = UDim2.new(0, 100, 1, 0)
        DropdownBtn.Position = UDim2.new(1, -105, 0, 0)
        DropdownBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
        DropdownBtn.BorderSizePixel = 0
        DropdownBtn.Text = default or options[1] or "Select"
        DropdownBtn.TextColor3 = Data.Theme.Text
        DropdownBtn.TextSize = 12
        DropdownBtn.Font = Enum.Font.Gotham
        DropdownBtn.Parent = DropdownFrame
        
        local ListFrame = Instance.new("Frame")
        ListFrame.Size = UDim2.new(0, 100, 0, #options * 25)
        ListFrame.Position = UDim2.new(1, -105, 1, 0)
        ListFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
        ListFrame.BorderSizePixel = 0
        ListFrame.Visible = false
        ListFrame.Parent = DropdownFrame
        
        local ListLayout = Instance.new("UIListLayout")
        ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ListLayout.Parent = ListFrame
        
        for i, opt in ipairs(options) do
            local OptBtn = Instance.new("TextButton")
            OptBtn.Size = UDim2.new(1, 0, 0, 25)
            OptBtn.BackgroundTransparency = 1
            OptBtn.Text = opt
            OptBtn.TextColor3 = Data.Theme.Text
            OptBtn.TextSize = 12
            OptBtn.Font = Enum.Font.Gotham
            OptBtn.Parent = ListFrame
            
            OptBtn.MouseButton1Click:Connect(function()
                DropdownBtn.Text = opt
                callback(opt)
                ListFrame.Visible = false
            end)
        end
        
        DropdownBtn.MouseButton1Click:Connect(function()
            ListFrame.Visible = not ListFrame.Visible
        end)
        
        -- Cool: Autocomplete (Searchable)
        local SearchBox = Instance.new("TextBox")
        SearchBox.Size = UDim2.new(1, 0, 0, 25)
        SearchBox.Position = UDim2.new(0, 0, 0, -25)
        SearchBox.BackgroundColor3 = Color3.fromRGB(50,50,50)
        SearchBox.BorderSizePixel = 0
        SearchBox.PlaceholderText = "Search..."
        SearchBox.TextColor3 = Data.Theme.Text
        SearchBox.TextSize = 12
        SearchBox.Font = Enum.Font.Gotham
        SearchBox.Visible = false
        SearchBox.Parent = ListFrame
        
        DropdownBtn.MouseButton1Click:Connect(function()
            ListFrame.Visible = not ListFrame.Visible
            if ListFrame.Visible the
