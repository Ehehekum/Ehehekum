local NotificationSystem = {}

-- Configuration
NotificationSystem.Config = {
    Duration = 5,
    Spacing = 10,
    MaxOnScreen = 4,
    SlideInTime = 0.3,
    SlideOutTime = 0.5,
    Colors = {
        Background = Color3.fromRGB(40, 40, 40),
        Text = Color3.fromRGB(255, 255, 255),
        TimeText = Color3.fromRGB(180, 180, 180),
        AppName = Color3.fromRGB(0, 122, 255),
        Border = Color3.fromRGB(80, 80, 80),
        Shadow = Color3.fromRGB(0, 0, 0)
    }
}

-- Internal variables
NotificationSystem.ActiveNotifications = {}
NotificationSystem.NotificationGui = nil

-- Create the GUI container
function NotificationSystem:Initialize()
    if self.NotificationGui and self.NotificationGui.Parent then
        self.NotificationGui:Destroy()
    end
    
    self.NotificationGui = Instance.new("ScreenGui")
    self.NotificationGui.Name = "iPhoneNotifications"
    self.NotificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.NotificationGui.DisplayOrder = 10
    self.NotificationGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
    
    self.ActiveNotifications = {}
end

-- Create and show a notification
function NotificationSystem:Notify(title, message, options)
    if not self.NotificationGui then
        self:Initialize()
    end
    
    options = options or {}
    local duration = options.Duration or self.Config.Duration
    local appName = options.App or "System"
    local icon = options.Icon or ""
    local callback = options.Callback
    
    local notification = Instance.new("Frame")
    notification.Name = "iPhoneNotification"
    notification.Size = UDim2.new(0.8, 0, 0, 80)
    notification.Position = UDim2.new(0.1, 0, 0, -notification.Size.Y.Offset)
    notification.AnchorPoint = Vector2.new(0, 0)
    notification.BackgroundColor3 = self.Config.Colors.Background
    notification.BorderSizePixel = 0
    notification.ClipsDescendants = true
    notification.ZIndex = 10
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 14)
    corner.Parent = notification
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = self.Config.Colors.Border
    stroke.Thickness = 1
    stroke.Parent = notification
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, -5, 0, -5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = self.Config.Colors.Shadow
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.ZIndex = 9
    shadow.Parent = notification
    
    if icon ~= "" then
        local iconImage = Instance.new("ImageLabel")
        iconImage.Name = "Icon"
        iconImage.Size = UDim2.new(0, 50, 0, 50)
        iconImage.Position = UDim2.new(0, 15, 0, 15)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = icon
        iconImage.ZIndex = 11
        iconImage.Parent = notification
    end
    
    local appLabel = Instance.new("TextLabel")
    appLabel.Name = "AppName"
    appLabel.Size = UDim2.new(0.7, -60, 0, 20)
    appLabel.Position = UDim2.new(0, icon ~= "" and 75 or 15, 0, 15)
    appLabel.BackgroundTransparency = 1
    appLabel.Text = appName
    appLabel.TextColor3 = self.Config.Colors.AppName
    appLabel.TextSize = 14
    appLabel.TextXAlignment = Enum.TextXAlignment.Left
    appLabel.Font = Enum.Font.SourceSansSemibold
    appLabel.ZIndex = 11
    appLabel.Parent = notification
    
    local timeLabel = Instance.new("TextLabel")
    timeLabel.Name = "Time"
    timeLabel.Size = UDim2.new(0.2, 0, 0, 20)
    timeLabel.Position = UDim2.new(0.8, -15, 0, 15)
    timeLabel.AnchorPoint = Vector2.new(1, 0)
    timeLabel.BackgroundTransparency = 1
    timeLabel.Text = os.date("%H:%M")
    timeLabel.TextColor3 = self.Config.Colors.TimeText
    timeLabel.TextSize = 14
    timeLabel.TextXAlignment = Enum.TextXAlignment.Right
    timeLabel.Font = Enum.Font.SourceSans
    timeLabel.ZIndex = 11
    timeLabel.Parent = notification
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(0.95, -60, 0, 20)
    titleLabel.Position = UDim2.new(0, icon ~= "" and 75 or 15, 0, 35)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Notification"
    titleLabel.TextColor3 = self.Config.Colors.Text
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.SourceSansSemibold
    titleLabel.ZIndex = 11
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(0.95, -60, 0, 20)
    messageLabel.Position = UDim2.new(0, icon ~= "" and 75 or 15, 0, 55)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message or ""
    messageLabel.TextColor3 = self.Config.Colors.Text
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.Font = Enum.Font.SourceSans
    messageLabel.ZIndex = 11
    messageLabel.Parent = notification
    
    if string.len(message or "") > 30 then
        messageLabel.Size = UDim2.new(0.95, -60, 0, 40)
        notification.Size = UDim2.new(0.8, 0, 0, 100)
    end
    
    if callback then
        notification.BackgroundTransparency = 0.05
        
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(1, 0, 1, 0)
        button.BackgroundTransparency = 1
        button.BorderSizePixel = 0
        button.Text = ""
        button.ZIndex = 12
        button.Parent = notification
        
        button.MouseButton1Click:Connect(function()
            callback()
            self:RemoveNotification(notification)
        end)
    end
    
    notification.Parent = self.NotificationGui
    table.insert(self.ActiveNotifications, notification)
    
    local slideIn = game:GetService("TweenService"):Create(
        notification,
        TweenInfo.new(self.Config.SlideInTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Position = UDim2.new(0.1, 0, 0, self:GetNotificationPosition(#self.ActiveNotifications))}
    )
    slideIn:Play()
    
    local removeConnection
    removeConnection = game:GetService("RunService").Heartbeat:Connect(function()
        if not notification or not notification.Parent then
            if removeConnection then removeConnection:Disconnect() end
            return
        end
        
        duration = duration - wait()
        if duration <= 0 then
            if removeConnection then removeConnection:Disconnect() end
            self:RemoveNotification(notification)
        end
    end)
    
    return notification
end

function NotificationSystem:GetNotificationPosition(index)
    local position = self.Config.Spacing
    for i = 1, index - 1 do
        if self.ActiveNotifications[i] and self.ActiveNotifications[i].Parent then
            position = position + self.ActiveNotifications[i].Size.Y.Offset + self.Config.Spacing
        end
    end
    return position
end

function NotificationSystem:RemoveNotification(notification)
    if not notification or not notification.Parent then return end
    
    local index
    for i, notif in ipairs(self.ActiveNotifications) do
        if notif == notification then
            index = i
            break
        end
    end
    
    if not index then return end
    
    local slideOut = game:GetService("TweenService"):Create(
        notification,
        TweenInfo.new(self.Config.SlideOutTime, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
        {Position = UDim2.new(0.1, 0, 0, -notification.Size.Y.Offset)}
    )
    slideOut:Play()
    
    slideOut.Completed:Connect(function()
        if notification and notification.Parent then notification:Destroy() end
    end)
    
    table.remove(self.ActiveNotifications, index)
    
    for i, notif in ipairs(self.ActiveNotifications) do
        if notif and notif.Parent then
            local updatePos = game:GetService("TweenService"):Create(
                notif,
                TweenInfo.new(self.Config.SlideOutTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {Position = UDim2.new(0.1, 0, 0, self:GetNotificationPosition(i))}
            )
            updatePos:Play()
        end
    end
end

function NotificationSystem:ClearAll()
    for i = #self.ActiveNotifications, 1, -1 do
        self:RemoveNotification(self.ActiveNotifications[i])
    end
end

function NotificationSystem:Demo()
    self:ClearAll()
    
    self:Notify(
        "Message Received",
        "Hey there! How are you doing today?",
        {
            App = "Messages",
            Duration = 5,
            Icon = "rbxassetid://3926305904",
            Callback = function() print("Message notification clicked!") end
        }
    )
    
    wait(1.5)
    
    self:Notify(
        "Game Update",
        "New features have been added to the game! Check them out now.",
        {
            App = "Game",
            Duration = 5,
            Icon = "rbxassetid://3926307971",
            Callback = function() print("Game notification clicked!") end
        }
    )
    
    wait(2)
    
    self:Notify(
        "Reminder",
        "Don't forget to complete your daily tasks!",
        {
            App = "Reminders",
            Duration = 5,
            Icon = "rbxassetid://3926305904",
            Callback = function() print("Reminder notification clicked!") end
        }
    )
end

NotificationSystem:Initialize()

-- Add to global namespace for easy access
getgenv().iPhoneNotifications = NotificationSystem

-- Auto demo (optional - remove if you don't want demo notifications on load)
wait(1)
iPhoneNotifications:Demo()

return NotificationSystem
