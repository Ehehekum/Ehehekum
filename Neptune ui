-- Neptune UI Library (inline) - Dark Theme / Soft Purple Accent - by ChatGPT
-- Lib variable will be returned

local Lib = {}
Lib.AccentColor = Color3.fromRGB(155,105,255)

-- Create screen gui
local player = game.Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "NeptuneUILibrary"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Window
local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 420, 0, 260)
mainFrame.Position = UDim2.new(0.35,0,0.35,0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25,25,25)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.BorderSizePixel = 0

-- Top Bar / Tab Bar
local tabBar = Instance.new("Frame", mainFrame)
tabBar.Size = UDim2.new(1,0,0,28)
tabBar.BackgroundColor3 = Color3.fromRGB(20,20,20)
tabBar.BorderSizePixel = 0

-- Tab container
local tabContainer = Instance.new("Frame", mainFrame)
tabContainer.Size = UDim2.new(1,0,1,-28)
tabContainer.Position = UDim2.new(0,0,0,28)
tabContainer.BackgroundTransparency = 1
tabContainer.Name = "TabContainer"

-- Notification container
local notifContainer = Instance.new("Frame", screenGui)
notifContainer.BackgroundTransparency = 1
notifContainer.Size = UDim2.new(1,0,1,0)
notifContainer.Position = UDim2.new(0,0,0,0)
notifContainer.Name = "NotificationContainer"

-- Internal tables
local tabs = {}
local currentTab = nil

-------------------------------------------------------------------

-- Create a tab button
local function createTabButton(name)
    local b = Instance.new("TextButton", tabBar)
    b.Size = UDim2.new(0,80,1,0)
    b.Text = name
    b.Font = Enum.Font.SourceSans
    b.TextSize = 15
    b.TextColor3 = Lib.AccentColor
    b.BackgroundColor3 = Color3.fromRGB(20,20,20)
    b.BorderSizePixel = 0
    return b
end

-- Switch tab
local function switchTo(tabName)
    if currentTab then tabs[currentTab].Page.Visible = false end
    currentTab = tabName
    tabs[currentTab].Page.Visible = true
end

-------------------------------------------------------------------
-- Public: CreateTab
function Lib:CreateTab(name)
    if tabs[name] then return tabs[name] end

    -- Tab button
    local tabButton = createTabButton(name)

    -- Tab page
    local page = Instance.new("ScrollingFrame", tabContainer)
    page.Name = name .. "_Page"
    page.Size = UDim2.new(1,0,1,0)
    page.CanvasSize = UDim2.new(0,0,0,0)
    page.ScrollBarThickness = 4
    page.BackgroundTransparency = 1
    page.Visible = false

    local UIList = Instance.new("UIListLayout", page)
    UIList.Padding = UDim.new(0,6)

    tabs[name] = {Button = tabButton, Page = page}

    -- Button click
    tabButton.MouseButton1Click:Connect(function()
        switchTo(name)
    end)

    if not currentTab then switchTo(name) end
    return tabs[name]
end

-------------------------------------------------------------------
-- UI elements
function Lib:CreateButton(tabName, text, callback)
    local tab = tabs[tabName]
    if not tab then return end

    local btn = Instance.new("TextButton", tab.Page)
    btn.Font = Enum.Font.SourceSans
    btn.Size = UDim2.new(1,-8,0,28)
    btn.TextSize = 15
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.BorderSizePixel = 0

    btn.MouseButton1Click:Connect(function()
        pcall(callback)
    end)
end

function Lib:CreateToggle(tabName, text, callback)
    local state = false
    local tab = tabs[tabName]
    if not tab then return end

    local btn = Instance.new("TextButton", tab.Page)
    btn.Font = Enum.Font.SourceSans
    btn.Size = UDim2.new(1,-8,0,28)
    btn.TextSize = 15
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.BorderSizePixel = 0

    local function update()
        btn.Text = (state and "[ON] " or "[OFF] ")..text
        btn.TextColor3 = state and Lib.AccentColor or Color3.new(1,1,1)
    end

    update()
    btn.MouseButton1Click:Connect(function()
        state = not state
        update()
        pcall(callback, state)
    end)
end

function Lib:CreateDropdown(tabName, text, list, callback)
    local tab = tabs[tabName]
    if not tab then return end

    local drop = Instance.new("TextButton", tab.Page)
    drop.Font = Enum.Font.SourceSans
    drop.Size = UDim2.new(1,-8,0,28)
    drop.TextSize = 15
    drop.Text = text.." ▼"
    drop.TextColor3 = Color3.new(1,1,1)
    drop.BackgroundColor3 = Color3.fromRGB(40,40,40)
    drop.BorderSizePixel = 0

    local open = false
    drop.MouseButton1Click:Connect(function()
        open = not open
        drop.Text = text .. (open and " ▲" or " ▼")

        if open then
            for _,v in ipairs(list) do
                local itm = Instance.new("TextButton", tab.Page)
                itm.Size = UDim2.new(1,-8,0,24)
                itm.Font = Enum.Font.SourceSans
                itm.TextSize = 15
                itm.Text = " - "..v
                itm.TextColor3 = Lib.AccentColor
                itm.BackgroundColor3 = Color3.fromRGB(35,35,35)
                itm.BorderSizePixel = 0
                itm.MouseButton1Click:Connect(function()
                    callback(v)
                    open = false
                    drop.Text = text.." ▼"
                    itm:Destroy()
                end)
            end
        else
            for _,c in ipairs(tab.Page:GetChildren()) do
                if c:IsA("TextButton") and string.sub(c.Text,1,3) == " -" then
                    c:Destroy()
                end
            end
        end
    end)
end

function Lib:CreateSlider(tabName, text, minVal, maxVal, defaultVal, callback)
    local tab = tabs[tabName]
    if not tab then return end

    local sliderFrame = Instance.new("Frame", tab.Page)
    sliderFrame.Size = UDim2.new(1,-8,0,28)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
    sliderFrame.BorderSizePixel = 0

    local label = Instance.new("TextLabel", sliderFrame)
    label.Size = UDim2.new(0.6,0,1,0)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 15
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextColor3 = Color3.new(1,1,1)
    label.Text = text..": "..defaultVal
    label.BackgroundTransparency = 1

    local bar = Instance.new("Frame", sliderFrame)
    bar.BackgroundColor3 = Color3.fromRGB(25,25,25)
    bar.Position = UDim2.new(0.65,0,0.3,0)
    bar.Size = UDim2.new(0.32,0,0.4,0)
    bar.BorderSizePixel = 0

    local fill = Instance.new("Frame", bar)
    fill.Size = UDim2.new((defaultVal-minVal)/(maxVal-minVal),0,1,0)
    fill.BackgroundColor3 = Lib.AccentColor
    fill.BorderSizePixel = 0

    local function update(v)
        local ratio = (v-minVal)/(maxVal-minVal)
        fill.Size = UDim2.new(math.clamp(ratio,0,1),0,1,0)
        label.Text = text..": "..math.floor(v)
        callback(v)
    end

    local dragging = false
    bar.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    bar.InputEnded:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    game:GetService("RunService").RenderStepped:Connect(function()
        if dragging then
            local mousePos = game:GetService("UserInputService"):GetMouseLocation().X
            local barPos = bar.AbsolutePosition.X
            local barSize = bar.AbsoluteSize.X
            local pct = (mousePos-barPos)/barSize
            local val = minVal + ((maxVal-minVal) * pct)
            update(val)
        end
    end)

    update(defaultVal)
end

-------------------------------------------------------------------
-- Simple Notification
function Lib:Notify(text)
    local n = Instance.new("TextLabel", notifContainer)
    n.AnchorPoint = Vector2.new(0.5,1)
    n.Position = UDim2.new(0.5,0,1,-10)
    n.Size = UDim2.new(0,260,0,30)
    n.BackgroundColor3 = Color3.fromRGB(30,30,30)
    n.TextColor3 = Color3.new(1,1,1)
    n.Font = Enum.Font.SourceSans
    n.TextSize = 14
    n.BorderSizePixel = 0
    n.Text = text
    game:GetService("TweenService"):Create(n, TweenInfo.new(0.4), {TextTransparency = 0, BackgroundTransparency = 0}):Play()
    task.delay(3, function()
        game:GetService("TweenService"):Create(n, TweenInfo.new(0.4), {TextTransparency = 1, BackgroundTransparency = 1}):Play()
        task.wait(0.4)
        n:Destroy()
    end)
end

-------------------------------------------------------------------
-- Auto-create "Main" tab on init
Lib:CreateTab("Main")

-------------------------------------------------------------------
return Lib
