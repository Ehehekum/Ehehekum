-- Ultimate Roblox Key System (No Notifications)
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local MarketplaceService = game:GetService("MarketplaceService")

-- Default configuration
getgenv().KeySystemConfig = getgenv().KeySystemConfig or {
    Keys = {
        {Key = "EPIC2025", UserId = nil, Expires = 1767225599}, -- Expires Dec 31, 2025
        {Key = "TEST123", UserId = nil, Expires = 1735689599}, -- Expires Dec 31, 2024
    },
    Icon = "rbxassetid://18353443327", -- Default icon
    SoundId = "rbxassetid://9120386446", -- Default sound
    PrimaryColor = Color3.fromRGB(255, 50, 100), -- Red
    SecondaryColor = Color3.fromRGB(255, 150, 0), -- Orange
    GlowColor = Color3.fromRGB(255, 100, 150), -- Pink glow
    LastKey = nil, -- Stores last valid key
    ScriptAccess = false -- Tracks validation
}

-- Validate icon
local function validateIcon(iconId)
    if iconId and iconId ~= "" then
        local success, result = pcall(function()
            local id = tonumber(iconId:match("%d+"))
            if id then
                local info = MarketplaceService:GetProductInfo(id)
                return info.AssetTypeId == 1 or info.AssetTypeId == 13 -- Image or Decal
            end
            return false
        end)
        if success and result then
            return iconId
        end
    end
    return "rbxassetid://18353443327" -- Fallback vibrant icon
end

-- Create key system GUI
local function createKeySystemGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "KeySystemGUI"
    ScreenGui.Parent = PlayerGui
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.IgnoreGuiInset = true

    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 400, 0, 240)
    Frame.Position = UDim2.new(0.5, -200, 0.5, -120)
    Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 15)
    UICorner.Parent = Frame

    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, getgenv().KeySystemConfig.PrimaryColor),
        ColorSequenceKeypoint.new(1, getgenv().KeySystemConfig.SecondaryColor)
    }
    UIGradient.Rotation = 135
    UIGradient.Parent = Frame

    local UIStroke = Instance.new("UIStroke")
    UIStroke.Thickness = 3
    UIStroke.Color = getgenv().KeySystemConfig.GlowColor
    UIStroke.Transparency = 0.2
    UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    UIStroke.Parent = Frame
    local function pulseGlow()
        while Frame.Parent do
            TweenService:Create(UIStroke, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                Transparency = 0
            }):Play()
            wait(1)
            TweenService:Create(UIStroke, TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
                Transparency = 0.2
            }):Play()
            wait(1)
        end
    end
    spawn(pulseGlow)

    local Icon = Instance.new("ImageLabel")
    Icon.Size = UDim2.new(0, 50, 0, 50)
    Icon.Position = UDim2.new(0, 10, 0, 10)
    Icon.BackgroundTransparency = 1
    Icon.Image = validateIcon(getgenv().KeySystemConfig.Icon)
    Icon.Parent = Frame
    TweenService:Create(Icon, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Rotation = 360
    }):Play()

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -70, 0, 40)
    Title.Position = UDim2.new(0, 70, 0, 15)
    Title.BackgroundTransparency = 1
    Title.Text = "Key System"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 24
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Font = Enum.Font.FredokaOne
    Title.Parent = Frame

    local KeyInput = Instance.new("TextBox")
    KeyInput.Size = UDim2.new(0, 300, 0, 40)
    KeyInput.Position = UDim2.new(0.5, -150, 0, 80)
    KeyInput.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    KeyInput.Text = getgenv().KeySystemConfig.LastKey or "Enter Key"
    KeyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyInput.TextSize = 16
    KeyInput.Font = Enum.Font.Gotham
    KeyInput.Parent = Frame
    local KeyCorner = Instance.new("UICorner")
    KeyCorner.CornerRadius = UDim.new(0, 8)
    KeyCorner.Parent = KeyInput

    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Size = UDim2.new(0, 300, 0, 30)
    StatusLabel.Position = UDim2.new(0.5, -150, 0, 130)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = ""
    StatusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    StatusLabel.TextSize = 14
    StatusLabel.TextWrapped = true
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.Parent = Frame

    local SubmitButton = Instance.new("TextButton")
    SubmitButton.Size = UDim2.new(0, 120, 0, 40)
    SubmitButton.Position = UDim2.new(0.5, -60, 0, 170)
    SubmitButton.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
    SubmitButton.Text = "Submit"
    SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    SubmitButton.TextSize = 16
    SubmitButton.Font = Enum.Font.FredokaOne
    SubmitButton.Parent = Frame
    local SubmitCorner = Instance.new("UICorner")
    SubmitCorner.CornerRadius = UDim.new(0, 10)
    SubmitCorner.Parent = SubmitButton

    local Sound = Instance.new("Sound")
    Sound.SoundId = getgenv().KeySystemConfig.SoundId
    Sound.Volume = 0.8
    Sound.Parent = Frame
    Sound:Play()

    SubmitButton.MouseEnter:Connect(function()
        TweenService:Create(SubmitButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            Size = UDim2.new(0, 125, 0, 42),
            Rotation = 2
        }):Play()
    end)
    SubmitButton.MouseLeave:Connect(function()
        TweenService:Create(SubmitButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            Size = UDim2.new(0, 120, 0, 40),
            Rotation = 0
        }):Play()
    end)

    local function validateKey(key)
        for _, keyData in ipairs(getgenv().KeySystemConfig.Keys) do
            if keyData.Key == key then
                if keyData.UserId and keyData.UserId ~= LocalPlayer.UserId then
                    return false, "Key is bound to another user!"
                end
                if keyData.Expires and os.time() > keyData.Expires then
                    return false, "Key has expired!"
                }
                return true, "Key validated successfully!"
            end
        end
        return false, "Invalid key!"
    end

    SubmitButton.MouseButton1Click:Connect(function()
        local key = KeyInput.Text
        local success, message = validateKey(key)
        StatusLabel.Text = message
        StatusLabel.TextColor3 = success and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 100, 100)
        if success then
            getgenv().KeySystemConfig.LastKey = key
            getgenv().KeySystemConfig.ScriptAccess = true
            local ClickSound = Instance.new("Sound")
            ClickSound.SoundId = "rbxassetid://206279937"
            ClickSound.Volume = 0.5
            ClickSound.Parent = Frame
            ClickSound:Play()
            TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
                Position = UDim2.new(0.5, -200, 0.5, -400)
            }):Play()
            wait(0.5)
            ScreenGui:Destroy()
        end
    end)

    if getgenv().KeySystemConfig.LastKey then
        local success, message = validateKey(getgenv().KeySystemConfig.LastKey)
        if success then
            getgenv().KeySystemConfig.ScriptAccess = true
            StatusLabel.Text = "Auto-validated key: " .. getgenv().KeySystemConfig.LastKey
            StatusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
            wait(1)
            TweenService:Create(Frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
                Position = UDim2.new(0.5, -200, 0.5, -400)
            }):Play()
            wait(0.5)
            ScreenGui:Destroy()
            return
        else
            getgenv().KeySystemConfig.LastKey = nil
            KeyInput.Text = "Enter Key"
            StatusLabel.Text = message
        end
    end

    local tweenIn = TweenService:Create(Frame, TweenInfo.new(0.7, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, -200, 0.5, -120)
    })
    tweenIn:Play()
end

-- Main logic
if not getgenv().KeySystemConfig.ScriptAccess then
    createKeySystemGUI()
else
    print("Script access granted!")
end valueLabel.TextColor3 = COLORS.TextSecondary
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = container

    local sliderBg = Instance.new("Frame")
    sliderBg.Size = UDim2.new(1, 0, 0, 6)
    sliderBg.Position = UDim2.new(0, 0, 0, 30)
    sliderBg.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = container
    createCorner(sliderBg, 3)

    local currentValue = defaultValue or minValue
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((currentValue - minValue) / (maxValue - minValue), 0, 1, 0)
    sliderFill.BackgroundColor3 = COLORS.Accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBg
    createCorner(sliderFill, 3)

    local sliderKnob = Instance.new("Frame")
    sliderKnob.Size = UDim2.new(0, 14, 0, 14)
    sliderKnob.Position = UDim2.new((currentValue - minValue) / (maxValue - minValue), -7, 0.5, -7)
    sliderKnob.BackgroundColor3 = COLORS.TextPrimary
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBg
    createCorner(sliderKnob, 7)

    local dragging = false
    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    sliderBg.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local mousePos = UserInputService:GetMouseLocation()
            local sliderPos = sliderBg.AbsolutePosition
            local sliderSize = sliderBg.AbsoluteSize
            local relativePos = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
            currentValue = minValue + (maxValue - minValue) * relativePos
            sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            sliderKnob.Position = UDim2.new(relativePos, -7, 0.5, -7)
            valueLabel.Text = tostring(math.floor(currentValue)) .. (suffix or "")
            if callback then
                callback(currentValue)
            end
        end
    end)
    sliderBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return sliderBg, function() return currentValue end
end

-- Create Dropdown
function NeptuneUI:CreateDropdown(section, name, options, defaultOption, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = section

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -100, 0, 25)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = COLORS.TextSecondary
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Size = UDim2.new(0, 150, 0, 30)
    dropdownBtn.Position = UDim2.new(1, -155, 0.5, -15)
    dropdownBtn.BackgroundColor3 = COLORS.Button
    dropdownBtn.Text = defaultOption or options[1] or "Select"
    dropdownBtn.TextColor3 = COLORS.TextSecondary
    dropdownBtn.Font = Enum.Font.Gotham
    dropdownBtn.TextSize = 14
    dropdownBtn.BorderSizePixel = 0
    dropdownBtn.Parent = container
    createCorner(dropdownBtn, 8)

    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = UDim2.new(0, 150, 0, 0)
    dropdownFrame.Position = UDim2.new(1, -155, 0, 35)
    dropdownFrame.BackgroundColor3 = COLORS.Dropdown
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Visible = false
    dropdownFrame.Parent = container
    createCorner(dropdownFrame, 8)

    local dropdownLayout = Instance.new("UIListLayout")
    dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
    dropdownLayout.Padding = UDim.new(0, 4)
    dropdownLayout.Parent = dropdownFrame

    local selectedOption = defaultOption or options[1]
    for i, option in ipairs(options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Size = UDim2.new(1, 0, 0, 30)
        optionBtn.BackgroundColor3 = COLORS.Button
        optionBtn.Text = option
        optionBtn.TextColor3 = COLORS.TextSecondary
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.TextSize = 14
        optionBtn.BorderSizePixel = 0
        optionBtn.Parent = dropdownFrame
        createCorner(optionBtn, 6)

        optionBtn.MouseButton1Click:Connect(function()
            selectedOption = option
            dropdownBtn.Text = option
            dropdownFrame.Visible = false
            if callback then
                callback(option)
            end
        end)
    end

    dropdownFrame.Size = UDim2.new(0, 150, 0, #options * 34)

    dropdownBtn.MouseButton1Click:Connect(function()
        dropdownFrame.Visible = not dropdownFrame.Visible
    end)

    return dropdownBtn, function() return selectedOption end
end

return NeptuneUI= UDim2.new(0, 12, 0, 12)
    sliderKnob.Position = UDim2.new((currentValue - minValue) / (maxValue - minValue), -6, 0.5, -6)
    sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBg
    createCorner(sliderKnob, 6)

    local dragging = false
    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    sliderBg.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local mousePos = UserInputService:GetMouseLocation()
            local sliderPos = sliderBg.AbsolutePosition
            local sliderSize = sliderBg.AbsoluteSize
            local relativePos = math.clamp((mousePos.X - sliderPos.X) / sliderSize.X, 0, 1)
            currentValue = minValue + (maxValue - minValue) * relativePos
            sliderFill.Size = UDim2.new(relativePos, 0, 1, 0)
            sliderKnob.Position = UDim2.new(relativePos, -6, 0.5, -6)
            valueLabel.Text = tostring(math.floor(currentValue)) .. (suffix or "")
            if callback then
                callback(currentValue)
            end
        end
    end)
    sliderBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return sliderBg, function() return currentValue end
end

return SimpleUI
