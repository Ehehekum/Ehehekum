-- Advanced Roblox UI Library (Version 2.0)
-- Features: Windows, Buttons, Labels, Text Inputs, Toggles, Dropdowns, Sliders, Color Pickers, Gradients, Mobile Support, Animations

local UILibrary = {}
UILibrary.__index = UILibrary

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local SoundService = game:GetService("SoundService")

-- Default Theme
local defaultTheme = {
    PrimaryColor = Color3.fromRGB(40, 40, 40),
    SecondaryColor = Color3.fromRGB(0, 170, 255),
    TextColor = Color3.fromRGB(255, 255, 255),
    HoverColor = Color3.fromRGB(60, 60, 60),
    Gradient = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(60, 60, 60))
    }),
    Font = Enum.Font.Gotham,
    FontBold = Enum.Font.GothamBold,
    CornerRadius = UDim.new(0, 10),
    ClickSound = "rbxassetid://9120386436", -- Verified notification sound
    MobileScale = 1.2 -- Scale for mobile touch targets
}

-- Default Decal IDs (verified as of August 31, 2025)
local defaultDecals = {
    buttonIcon = "rbxassetid://5108877300", -- Green checkmark
    toggleOn = "rbxassetid://5108877300",  -- Green checkmark
    toggleOff = "rbxassetid://5107154082"  -- Red X
}

-- Main UI Class
function UILibrary.new(config)
    config = config or {}
    local self = setmetatable({}, UILibrary)
    
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "UILibraryGui"
    self.ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    self.ScreenGui.IgnoreGuiInset = true -- Better mobile compatibility
    
    self.Theme = config.theme or defaultTheme
    self.Windows = {}
    self.ZIndex = 1000
    self.IsMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
    
    return self
end

-- Create a Window
function UILibrary:CreateWindow(title, size, position, draggable)
    local window = {}
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    window.Frame = Instance.new("Frame")
    window.Frame.Size = size or UDim2.new(0, 400 * scale, 0, 300 * scale)
    window.Frame.Position = position or UDim2.new(0.5, -(200 * scale), 0.5, -(150 * scale))
    window.Frame.BackgroundColor3 = self.Theme.PrimaryColor
    window.Frame.BorderSizePixel = 0
    window.Frame.Parent = self.ScreenGui
    window.Frame.ZIndex = self.ZIndex
    self.ZIndex = self.ZIndex + 10

    local gradient = Instance.new("UIGradient")
    gradient.Color = self.Theme.Gradient
    gradient.Parent = window.Frame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = window.Frame

    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 30 * scale)
    titleBar.BackgroundColor3 = self.Theme.SecondaryColor
    titleBar.BorderSizePixel = 0
    titleBar.Parent = window.Frame
    titleBar.ZIndex = window.Frame.ZIndex + 1

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0, 200 * scale, 1, 0)
    titleLabel.Position = UDim2.new(0, 10 * scale, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Window"
    titleLabel.TextColor3 = self.Theme.TextColor
    titleLabel.TextScaled = true
    titleLabel.Font = self.Theme.FontBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 24 * scale, 0, 24 * scale)
    closeButton.Position = UDim2.new(1, -(30 * scale), 0, 3 * scale)
    closeButton.BackgroundTransparency = 1
    closeButton.Text = "X"
    closeButton.TextColor3 = self.Theme.TextColor
    closeButton.Font = self.Theme.FontBold
    closeButton.TextScaled = true
    closeButton.Parent = titleBar

    -- Draggable (supports touch and mouse)
    if draggable then
        local dragging, dragStart, startPos
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = window.Frame.Position
            end
        end)
        titleBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                window.Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
    end

    -- Close Button
    closeButton.MouseButton1Click:Connect(function()
        local tween = TweenService:Create(window.Frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
        tween:Play()
        for _, child in ipairs(window.Frame:GetDescendants()) do
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                TweenService:Create(child, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
            elseif child:IsA("ImageLabel") then
                TweenService:Create(child, TweenInfo.new(0.3), {ImageTransparency = 1}):Play()
            elseif child:IsA("Frame") then
                TweenService:Create(child, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
            end
        end
        tween.Completed:Connect(function()
            window.Frame:Destroy()
            self.Windows[window] = nil
        end)
        local sound = Instance.new("Sound")
        sound.SoundId = self.Theme.ClickSound
        sound.Parent = window.Frame
        SoundService:PlayLocalSound(sound)
    end)

    window.Elements = {}
    window.ElementOffset = 40 * scale
    table.insert(self.Windows, window)
    return window
end

-- Create a Button
function UILibrary:CreateButton(window, text, callback, size, iconId)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Size = size or UDim2.new(0, 380 * scale, 0, 40 * scale)
    buttonFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    buttonFrame.BackgroundColor3 = self.Theme.SecondaryColor
    buttonFrame.Text = text or "Button"
    buttonFrame.TextColor3 = self.Theme.TextColor
    buttonFrame.TextScaled = true
    buttonFrame.Font = self.Theme.Font
    buttonFrame.Parent = window.Frame
    buttonFrame.ZIndex = window.Frame.ZIndex + 2

    local gradient = Instance.new("UIGradient")
    gradient.Color = self.Theme.Gradient
    gradient.Parent = buttonFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = buttonFrame

    if iconId or defaultDecals.buttonIcon then
        local icon = Instance.new("ImageLabel")
        icon.Size = UDim2.new(0, 24 * scale, 0, 24 * scale)
        icon.Position = UDim2.new(0, 10 * scale, 0, 8 * scale)
        icon.BackgroundTransparency = 1
        icon.Image = iconId or defaultDecals.buttonIcon
        icon.ImageColor3 = self.Theme.TextColor
        icon.Parent = buttonFrame
        buttonFrame.TextXAlignment = Enum.TextXAlignment.Right
        buttonFrame.Text = " " .. buttonFrame.Text
    end

    -- Hover Effect
    buttonFrame.MouseEnter:Connect(function()
        TweenService:Create(buttonFrame, TweenInfo.new(0.2), {BackgroundColor3 = self.Theme.HoverColor}):Play()
    end)
    buttonFrame.MouseLeave:Connect(function()
        TweenService:Create(buttonFrame, TweenInfo.new(0.2), {BackgroundColor3 = self.Theme.SecondaryColor}):Play()
    end)

    -- Click Event (supports touch)
    buttonFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            callback()
            local sound = Instance.new("Sound")
            sound.SoundId = self.Theme.ClickSound
            sound.Parent = buttonFrame
            SoundService:PlayLocalSound(sound)
        end
    end)

    window.ElementOffset = window.ElementOffset + buttonFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, buttonFrame)
    return buttonFrame
end

-- Create a Label
function UILibrary:CreateLabel(window, text, size)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local label = Instance.new("TextLabel")
    label.Size = size or UDim2.new(0, 380 * scale, 0, 30 * scale)
    label.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    label.BackgroundTransparency = 1
    label.Text = text or "Label"
    label.TextColor3 = self.Theme.TextColor
    label.TextScaled = true
    label.Font = self.Theme.Font
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = window.Frame
    label.ZIndex = window.Frame.ZIndex + 2

    window.ElementOffset = window.ElementOffset + label.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, label)
    return label
end

-- Create a Text Input
function UILibrary:CreateTextInput(window, placeholder, callback, size)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local inputFrame = Instance.new("Frame")
    inputFrame.Size = size or UDim2.new(0, 380 * scale, 0, 40 * scale)
    inputFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    inputFrame.BackgroundColor3 = self.Theme.PrimaryColor
    inputFrame.BorderSizePixel = 0
    inputFrame.Parent = window.Frame
    inputFrame.ZIndex = window.Frame.ZIndex + 2

    local gradient = Instance.new("UIGradient")
    gradient.Color = self.Theme.Gradient
    gradient.Parent = inputFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = inputFrame

    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(1, -10 * scale, 1, -10 * scale)
    textBox.Position = UDim2.new(0, 5 * scale, 0, 5 * scale)
    textBox.BackgroundTransparency = 1
    textBox.Text = ""
    textBox.PlaceholderText = placeholder or "Enter text..."
    textBox.TextColor3 = self.Theme.TextColor
    textBox.TextScaled = true
    textBox.Font = self.Theme.Font
    textBox.Parent = inputFrame

    textBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            callback(textBox.Text)
            local sound = Instance.new("Sound")
            sound.SoundId = self.Theme.ClickSound
            sound.Parent = inputFrame
            SoundService:PlayLocalSound(sound)
        end
    end)

    window.ElementOffset = window.ElementOffset + inputFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, inputFrame)
    return inputFrame
end

-- Create a Toggle
function UILibrary:CreateToggle(window, text, callback, size, onIcon, offIcon)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = size or UDim2.new(0, 380 * scale, 0, 40 * scale)
    toggleFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = window.Frame
    toggleFrame.ZIndex = window.Frame.ZIndex + 2

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300 * scale, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Toggle"
    label.TextColor3 = self.Theme.TextColor
    label.TextScaled = true
    label.Font = self.Theme.Font
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = toggleFrame

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 40 * scale, 0, 20 * scale)
    toggleButton.Position = UDim2.new(1, -(50 * scale), 0, 10 * scale)
    toggleButton.BackgroundColor3 = self.Theme.SecondaryColor
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = toggleButton

    local toggleIcon = Instance.new("ImageLabel")
    toggleIcon.Size = UDim2.new(0, 16 * scale, 0, 16 * scale)
    toggleIcon.Position = UDim2.new(0, 12 * scale, 0, 2 * scale)
    toggleIcon.BackgroundTransparency = 1
    toggleIcon.Image = offIcon or defaultDecals.toggleOff
    toggleIcon.ImageColor3 = self.Theme.TextColor
    toggleIcon.Parent = toggleButton

    local state = false
    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            state = not state
            TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = state and self.Theme.SecondaryColor or self.Theme.HoverColor}):Play()
            toggleIcon.Image = state and (onIcon or defaultDecals.toggleOn) or (offIcon or defaultDecals.toggleOff)
            callback(state)
            local sound = Instance.new("Sound")
            sound.SoundId = self.Theme.ClickSound
            sound.Parent = toggleFrame
            SoundService:PlayLocalSound(sound)
        end
    end)

    window.ElementOffset = window.ElementOffset + toggleFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, toggleFrame)
    return toggleFrame
end

-- Create a Dropdown
function UILibrary:CreateDropdown(window, text, options, callback, size)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = size or UDim2.new(0, 380 * scale, 0, 40 * scale)
    dropdownFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    dropdownFrame.BackgroundColor3 = self.Theme.PrimaryColor
    dropdownFrame.Parent = window.Frame
    dropdownFrame.ZIndex = window.Frame.ZIndex + 2

    local gradient = Instance.new("UIGradient")
    gradient.Color = self.Theme.Gradient
    gradient.Parent = dropdownFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = self.Theme.CornerRadius
    corner.Parent = dropdownFrame

    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Size = UDim2.new(1, 0, 1, 0)
    dropdownButton.BackgroundTransparency = 1
    dropdownButton.Text = text or "Select an option"
    dropdownButton.TextColor3 = self.Theme.TextColor
    dropdownButton.TextScaled = true
    dropdownButton.Font = self.Theme.Font
    dropdownButton.Parent = dropdownFrame

    local dropdownList = Instance.new("Frame")
    dropdownList.Size = UDim2.new(1, 0, 0, 0)
    dropdownList.Position = UDim2.new(0, 0, 1, 5 * scale)
    dropdownList.BackgroundColor3 = self.Theme.PrimaryColor
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.Parent = dropdownFrame
    dropdownList.ZIndex = dropdownFrame.ZIndex + 1

    local listGradient = Instance.new("UIGradient")
    listGradient.Color = self.Theme.Gradient
    listGradient.Parent = dropdownList

    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = self.Theme.CornerRadius
    list锦 = dropdownList

    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = dropdownList

    local optionButtons = {}
    for i, option in ipairs(options or {}) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 30 * scale)
        optionButton.BackgroundColor3 = self.Theme.SecondaryColor
        optionButton.Text = option
        optionButton.TextColor3 = self.Theme.TextColor
        optionButton.TextScaled = true
        optionButton.Font = self.Theme.Font
        optionButton.Parent = dropdownList
        optionButton.ZIndex = dropdownList.ZIndex + 1

        local optionCorner = Instance.new("UICorner")
        optionCorner.CornerRadius = self.Theme.CornerRadius
        optionCorner.Parent = optionButton

        optionButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dropdownButton.Text = option
                dropdownList.Visible = false
                TweenService:Create(dropdownList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
                callback(option)
                local sound = Instance.new("Sound")
                sound.SoundId = self.Theme.ClickSound
                sound.Parent = dropdownFrame
                SoundService:PlayLocalSound(sound)
            end
        end)

        table.insert(optionButtons, optionButton)
    end

    dropdownButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dropdownList.Visible = not dropdownList.Visible
            local listHeight = #optionButtons * 30 * scale + 10 * scale
            TweenService:Create(dropdownList, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, dropdownList.Visible and listHeight or 0)}):Play()
            local sound = Instance.new("Sound")
            sound.SoundId = self.Theme.ClickSound
            sound.Parent = dropdownFrame
            SoundService:PlayLocalSound(sound)
        end
    end)

    window.ElementOffset = window.ElementOffset + dropdownFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, dropdownFrame)
    return dropdownFrame
end

-- Create a Slider
function UILibrary:CreateSlider(window, text, min, max, default, callback, size)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = size or UDim2.new(0, 380 * scale, 0, 50 * scale)
    sliderFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = window.Frame
    sliderFrame.ZIndex = window.Frame.ZIndex + 2

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300 * scale, 0, 20 * scale)
    label.BackgroundTransparency = 1
    label.Text = text or "Slider"
    label.TextColor3 = self.Theme.TextColor
    label.TextScaled = true
    label.Font = self.Theme.Font
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = sliderFrame

    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 60 * scale, 0, 20 * scale)
    valueLabel.Position = UDim2.new(1, -(70 * scale), 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(default or min)
    valueLabel.TextColor3 = self.Theme.TextColor
    valueLabel.TextScaled = true
    valueLabel.Font = self.Theme.Font
    valueLabel.Parent = sliderFrame

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0, 10 * scale)
    sliderBar.Position = UDim2.new(0, 0, 0, 30 * scale)
    sliderBar.BackgroundColor3 = self.Theme.HoverColor
    sliderBar.Parent = sliderFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5)
    corner.Parent = sliderBar

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default or min) / max, 0, 1, 0)
    fill.BackgroundColor3 = self.Theme.SecondaryColor
    fill.Parent = sliderBar

    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 5)
    fillCorner.Parent = fill

    local knob = Instance.new("Frame")
    knob.Size = UDim2.new(0, 20 * scale, 0, 20 * scale)
    knob.Position = UDim2.new((default or min) / max, -10 * scale, 0, -5 * scale)
    knob.BackgroundColor3 = self.Theme.SecondaryColor
    knob.Parent = sliderBar

    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 10)
    knobCorner.Parent = knob

    local dragging = false
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    sliderBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = input.Position.X
            local barPos = sliderBar.AbsolutePosition.X
            local barSize = sliderBar.AbsoluteSize.X
            local t = math.clamp((mousePos - barPos) / barSize, 0, 1)
            local value = min + t * (max - min)
            value = math.round(value * 100) / 100 -- Round to 2 decimal places
            fill.Size = UDim2.new(t, 0, 1, 0)
            knob.Position = UDim2.new(t, -10 * scale, 0, -5 * scale)
            valueLabel.Text = tostring(value)
            callback(value)
        end
    end)

    window.ElementOffset = window.ElementOffset + sliderFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, sliderFrame)
    return sliderFrame
end

-- Create a Color Picker
function UILibrary:CreateColorPicker(window, text, default, callback, size)
    local scale = self.IsMobile and self.Theme.MobileScale or 1
    local pickerFrame = Instance.new("Frame")
    pickerFrame.Size = size or UDim2.new(0, 380 * scale, 0, 60 * scale)
    pickerFrame.Position = UDim2.new(0, 10 * scale, 0, window.ElementOffset)
    pickerFrame.BackgroundTransparency = 1
    pickerFrame.Parent = window.Frame
    pickerFrame.ZIndex = window.Frame.ZIndex + 2

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300 * scale, 0, 20 * scale)
    label.BackgroundTransparency = 1
    label.Text = text or "Color Picker"
    label.TextColor3 = self.Theme.TextColor
    label.TextScaled = true
    label.Font = self.Theme.Font
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = pickerFrame

    local colorButton = Instance.new("TextButton")
    colorButton.Size = UDim2.new(0, 40 * scale, 0, 40 * scale)
    colorButton.Position = UDim2.new(1, -(50 * scale), 0, 10 * scale)
    colorButton.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    colorButton.Text = ""
    colorButton.Parent = pickerFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = colorButton

    local pickerFrameInner = Instance.new("Frame")
    pickerFrameInner.Size = UDim2.new(0, 200 * scale, 0, 100 * scale)
    pickerFrameInner.Position = UDim2.new(0, 0, 1, 5 * scale)
    pickerFrameInner.BackgroundColor3 = self.Theme.PrimaryColor
    pickerFrameInner.Visible = false
    pickerFrameInner.Parent = pickerFrame
    pickerFrameInner.ZIndex = pickerFrame.ZIndex + 1

    local pickerCorner = Instance.new("UICorner")
    pickerCorner.CornerRadius = self.Theme.CornerRadius
    pickerCorner.Parent = pickerFrameInner

    local gradient = Instance.new("UIGradient")
    gradient.Color = self.Theme.Gradient
    gradient.Parent = pickerFrameInner

    local hueBar = Instance.new("Frame")
    hueBar.Size = UDim2.new(1, -10 * scale, 0, 10 * scale)
    hueBar.Position = UDim2.new(0, 5 * scale, 0, 5 * scale)
    hueBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueBar.Parent = pickerFrameInner

    local hueGradient = Instance.new("UIGradient")
    hueGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    hueGradient.Parent = hueBar

    local hueKnob = Instance.new("Frame")
    hueKnob.Size = UDim2.new(0, 10 * scale, 0, 10 * scale)
    hueKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    hueKnob.Parent = hueBar

    local hueKnobCorner = Instance.new("UICorner")
    hueKnobCorner.CornerRadius = UDim.new(0, 5)
    hueKnobCorner.Parent = hueKnob

    local dragging = false
    hueBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    hueBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = input.Position.X
            local barPos = hueBar.AbsolutePosition.X
            local barSize = hueBar.AbsoluteSize.X
            local t = math.clamp((mousePos - barPos) / barSize, 0, 1)
            hueKnob.Position = UDim2.new(t, -5 * scale, 0, 0)
            local hue = t * 360
            local color = Color3.fromHSV(hue / 360, 1, 1)
            colorButton.BackgroundColor3 = color
            callback(color)
        end
    end)

    colorButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            pickerFrameInner.Visible = not pickerFrameInner.Visible
            local sound = Instance.new("Sound")
            sound.SoundId = self.Theme.ClickSound
            sound.Parent = pickerFrame
            SoundService:PlayLocalSound(sound)
        end
    end)

    window.ElementOffset = window.ElementOffset + pickerFrame.Size.Y.Offset + 10 * scale
    table.insert(window.Elements, pickerFrame)
    return pickerFrame
end

return UILibrary
