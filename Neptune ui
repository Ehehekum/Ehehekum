-- Neptune UI Library (Mobile + Infinite Scroll)
-- Author: ChatGPT
local Lib = {}
Lib.AccentColor = Color3.fromRGB(155,105,255)

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "NeptuneUILibrary"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Window
local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0,420,0,260)
mainFrame.Position = UDim2.new(0.35,0,0.35,0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25,25,25)
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.BorderSizePixel = 0

-- Tab Bar
local tabBar = Instance.new("Frame", mainFrame)
tabBar.Size = UDim2.new(1,0,0,28)
tabBar.BackgroundColor3 = Color3.fromRGB(20,20,20)
tabBar.BorderSizePixel = 0

-- Tab Container
local tabContainer = Instance.new("Frame", mainFrame)
tabContainer.Size = UDim2.new(1,0,1,-28)
tabContainer.Position = UDim2.new(0,0,0,28)
tabContainer.BackgroundTransparency = 1

-- Notification Container
local notifContainer = Instance.new("Frame", screenGui)
notifContainer.BackgroundTransparency = 1
notifContainer.Size = UDim2.new(1,0,1,0)
notifContainer.Position = UDim2.new(0,0,0,0)

local tabs = {}
local currentTab = nil

-- Create Tab Button
local function createTabButton(name)
    local b = Instance.new("TextButton", tabBar)
    b.Size = UDim2.new(0,80,1,0)
    b.Text = name
    b.Font = Enum.Font.SourceSans
    b.TextSize = 15
    b.TextColor3 = Lib.AccentColor
    b.BackgroundColor3 = Color3.fromRGB(20,20,20)
    b.BorderSizePixel = 0
    return b
end

-- Switch Tab
local function switchTo(tabName)
    if currentTab then tabs[currentTab].Page.Visible = false end
    currentTab = tabName
    tabs[currentTab].Page.Visible = true
end

-- Create Tab
function Lib:CreateTab(name)
    if tabs[name] then return tabs[name] end

    local tabButton = createTabButton(name)
    local page = Instance.new("ScrollingFrame", tabContainer)
    page.Name = name.."_Page"
    page.Size = UDim2.new(1,0,1,0)
    page.CanvasSize = UDim2.new(0,0,0,0)
    page.ScrollBarThickness = 4
    page.BackgroundTransparency = 1
    page.Visible = false

    local UIList = Instance.new("UIListLayout", page)
    UIList.Padding = UDim.new(0,6)

    -- Infinite scroll
    UIList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        page.CanvasSize = UDim2.new(0,0,0,UIList.AbsoluteContentSize.Y + 6)
    end)

    tabs[name] = {Button = tabButton, Page = page}
    tabButton.MouseButton1Click:Connect(function() switchTo(name) end)
    if not currentTab then switchTo(name) end
    return tabs[name]
end

-- Button
function Lib:CreateButton(tabName, text, callback)
    local tab = tabs[tabName]
    if not tab then return end
    local btn = Instance.new("TextButton", tab.Page)
    btn.Font = Enum.Font.SourceSans
    btn.Size = UDim2.new(1,-8,0,28)
    btn.TextSize = 15
    btn.Text = text
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.BorderSizePixel = 0
    btn.MouseButton1Click:Connect(function() pcall(callback) end)
end

-- Toggle
function Lib:CreateToggle(tabName, text, callback)
    local state = false
    local tab = tabs[tabName]
    if not tab then return end
    local btn = Instance.new("TextButton", tab.Page)
    btn.Font = Enum.Font.SourceSans
    btn.Size = UDim2.new(1,-8,0,28)
    btn.TextSize = 15
    btn.BackgroundColor3 = Color3.fromRGB(40,40,40)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.BorderSizePixel = 0
    local function update()
        btn.Text = (state and "[ON] " or "[OFF] ")..text
        btn.TextColor3 = state and Lib.AccentColor or Color3.new(1,1,1)
    end
    update()
    btn.MouseButton1Click:Connect(function()
        state = not state
        update()
        pcall(callback, state)
    end)
end

-- Slider
function Lib:CreateSlider(tabName, text, minVal, maxVal, defaultVal, callback)
    local tab = tabs[tabName]
    if not tab then return end
    local sliderFrame = Instance.new("Frame", tab.Page)
    sliderFrame.Size = UDim2.new(1,-8,0,28)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)
    sliderFrame.BorderSizePixel = 0
    local label = Instance.new("TextLabel", sliderFrame)
    label.Size = UDim2.new(0.6,0,1,0)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 15
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextColor3 = Color3.new(1,1,1)
    label.Text = text..": "..defaultVal
    label.BackgroundTransparency = 1
    local bar = Instance.new("Frame", sliderFrame)
    bar.BackgroundColor3 = Color3.fromRGB(25,25,25)
    bar.Position = UDim2.new(0.65,0,0.3,0)
    bar.Size = UDim2.new(0.32,0,0.4,0)
    bar.BorderSizePixel = 0
    local fill = Instance.new("Frame", bar)
    fill.Size = UDim2.new((defaultVal-minVal)/(maxVal-minVal),0,1,0)
    fill.BackgroundColor3 = Lib.AccentColor
    fill.BorderSizePixel = 0
    local function update(v)
        local ratio = (v-minVal)/(maxVal-minVal)
        fill.Size = UDim2.new(math.clamp(ratio,0,1),0,1,0)
        label.Text = text..": "..math.floor(v)
        callback(v)
    end
    local dragging = false
    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end)
    bar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    bar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local mouseX = input.Position.X
            local barPos = bar.AbsolutePosition.X
            local barSize = bar.AbsoluteSize.X
            local pct = (mouseX - barPos)/barSize
            local val = minVal + ((maxVal-minVal)*(pct))
            update(val)
        end
    end)
    update(defaultVal)
end

-- Dropdown
function Lib:CreateDropdown(tabName, text, list, callback)
    local tab = tabs[tabName]
    if not tab then return end
    local drop = Instance.new("TextButton", tab.Page)
    drop.Font = Enum.Font.SourceSans
    drop.Size = UDim2.new(1,-8,0,28)
    drop.TextSize = 15
    drop.Text = text.." ▼"
    drop.TextColor3 = Color3.new(1,1,1)
    drop.BackgroundColor3 = Color3.fromRGB(40,40,40)
    drop.BorderSizePixel = 0
    local open = false
    local optionButtons = {}
    local function closeDropdown()
        open = false
        drop.Text = text.." ▼"
        for _, b in pairs(optionButtons) do b:Destroy() end
        optionButtons = {}
    end
    drop.MouseButton1Click:Connect(function()
        if open then closeDropdown() else
            open = true
            drop.Text = text.." ▲"
            for i,v in ipairs(list) do
                local itm = Instance.new("TextButton", tab.Page)
                itm.Size = UDim2.new(1,-8,0,24)
                itm.Position = UDim2.new(0,0,0,28*i)
                itm.Font = Enum.Font.SourceSans
                itm.TextSize = 15
                itm.Text = v
                itm.TextColor3 = Lib.AccentColor
                itm.BackgroundColor3 = Color3.fromRGB(35,35,35)
                itm.BorderSizePixel = 0
                itm.MouseButton1Click:Connect(function()
                    callback(v)
                    closeDropdown()
                end)
                table.insert(optionButtons,itm)
            end
        end
    end)
    UIS.InputBegan:Connect(function(input)
        if open and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = input.Position
            local absPos = drop.AbsolutePosition
            local absSize = drop.AbsoluteSize
            if not (mousePos.X >= absPos.X and mousePos.X <= absPos.X+absSize.X and
                    mousePos.Y >= absPos.Y and mousePos.Y <= absPos.Y+absSize.Y) then
                closeDropdown()
            end
        end
    end)
end

-- Notifications
function Lib:Notify(msg)
    local notif = Instance.new("TextLabel", notifContainer)
    notif.BackgroundColor3 = Color3.fromRGB(25,25,25)
    notif.Size = UDim2.new(0,250,0,30)
    notif.Position = UDim2.new(0.5,-125,0,50)
    notif.Text = msg
    notif.TextColor3 = Color3.new(1,1,1)
    notif.TextSize = 15
    notif.Font = Enum.Font.SourceSans
    notif.BorderSizePixel = 0
    notif.BackgroundTransparency = 0.1
    task.delay(3,function() notif:Destroy() end)
end

return Lib
