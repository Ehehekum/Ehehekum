-- KeySystemLibrary (Loadstring-Compatible)
local KeySystemLibrary = {}
KeySystemLibrary.__index = KeySystemLibrary

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- Default Configuration
local DefaultConfig = {
    Size = UDim2.new(0, 400, 0, 250),
    BackgroundColor = Color3.fromRGB(30, 30, 30),
    TitleText = "Key System",
    TitleColor = Color3.fromRGB(255, 255, 255),
    TitleFont = Enum.Font.GothamBold,
    TitleSize = 24,
    InputPlaceholder = "Enter your key here...",
    InputBackground = Color3.fromRGB(40, 40, 40),
    InputTextColor = Color3.fromRGB(200, 200, 200),
    InputFont = Enum.Font.Gotham,
    InputSize = 16,
    ButtonText = "Submit",
    ButtonBackground = Color3.fromRGB(0, 120, 255),
    ButtonHoverColor = Color3.fromRGB(0, 150, 255),
    ButtonTextColor = Color3.fromRGB(255, 255, 255),
    ButtonFont = Enum.Font.GothamBold,
    ButtonTextSize = 18,
    CornerRadius = 12,
    SuccessSoundId = "rbxassetid://9119747931",
    ErrorSoundId = "rbxassetid://9119747931",
    AnimationDuration = 0.5,
}

-- Constructor
function KeySystemLibrary.new(config)
    local self = setmetatable({}, KeySystemLibrary)
    self.Config = {}
    for k, v in pairs(DefaultConfig) do
        self.Config[k] = config and config[k] or v
    end
    self:CreateUI()
    self:SetupAnimations()
    self:BindEvents()
    return self
end

-- Create UI
function KeySystemLibrary:CreateUI()
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "KeySystemGUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.Parent = playerGui
    
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Size = self.Config.Size
    self.MainFrame.Position = UDim2.new(0.5, -self.Config.Size.X.Offset / 2, 0.5, -self.Config.Size.Y.Offset / 2)
    self.MainFrame.BackgroundColor3 = self.Config.BackgroundColor
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.ClipsDescendants = true
    self.MainFrame.Parent = self.ScreenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, self.Config.CornerRadius)
    corner.Parent = self.MainFrame
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
    })
    gradient.Rotation = 45
    gradient.Parent = self.MainFrame
    
    local shadow = Instance.new("ImageLabel")
    shadow.Image = "rbxassetid://1316045217"
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.BackgroundTransparency = 1
    shadow.ImageTransparency = 0.8
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.Parent = self.MainFrame
    
    self.Title = Instance.new("TextLabel")
    self.Title.Size = UDim2.new(1, 0, 0, 50)
    self.Title.Position = UDim2.new(0, 0, 0, 10)
    self.Title.BackgroundTransparency = 1
    self.Title.Text = self.Config.TitleText
    self.Title.TextColor3 = self.Config.TitleColor
    self.Title.TextSize = self.Config.TitleSize
    self.Title.Font = self.Config.TitleFont
    self.Title.Parent = self.MainFrame
    
    self.KeyInput = Instance.new("TextBox")
    self.KeyInput.Size = UDim2.new(0.9, 0, 0, 40)
    self.KeyInput.Position = UDim2.new(0.05, 0, 0, 80)
    self.KeyInput.BackgroundColor3 = self.Config.InputBackground
    self.KeyInput.Text = ""
    self.KeyInput.PlaceholderText = self.Config.InputPlaceholder
    self.KeyInput.TextColor3 = self.Config.InputTextColor
    self.KeyInput.TextSize = self.Config.InputSize
    self.KeyInput.Font = self.Config.InputFont
    self.KeyInput.Parent = self.MainFrame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, self.Config.CornerRadius - 4)
    inputCorner.Parent = self.KeyInput
    
    self.SubmitButton = Instance.new("TextButton")
    self.SubmitButton.Size = UDim2.new(0.4, 0, 0, 40)
    self.SubmitButton.Position = UDim2.new(0.3, 0, 0, 150)
    self.SubmitButton.BackgroundColor3 = self.Config.ButtonBackground
    self.SubmitButton.Text = self.Config.ButtonText
    self.SubmitButton.TextColor3 = self.Config.ButtonTextColor
    self.SubmitButton.TextSize = self.Config.ButtonTextSize
    self.SubmitButton.Font = self.Config.ButtonFont
    self.SubmitButton.Parent = self.MainFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, self.Config.CornerRadius - 4)
    buttonCorner.Parent = self.SubmitButton
    
    self.StatusLabel = Instance.new("TextLabel")
    self.StatusLabel.Size = UDim2.new(0.9, 0, 0, 30)
    self.StatusLabel.Position = UDim2.new(0.05, 0, 0, 200)
    self.StatusLabel.BackgroundTransparency = 1
    self.StatusLabel.Text = ""
    self.StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.StatusLabel.TextSize = 14
    self.StatusLabel.Font = self.Config.InputFont
    self.StatusLabel.Parent = self.MainFrame
end

-- Setup Animations
function KeySystemLibrary:SetupAnimations()
    self.Tweens = {}
    self.MainFrame.BackgroundTransparency = 1
    self.Title.TextTransparency = 1
    self.KeyInput.BackgroundTransparency = 1
    self.KeyInput.TextTransparency = 1
    self.SubmitButton.BackgroundTransparency = 1
    self.SubmitButton.TextTransparency = 1
    self.StatusLabel.TextTransparency = 1
    
    local fadeInInfo = TweenInfo.new(self.Config.AnimationDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    self.Tweens.FadeInFrame = TweenService:Create(self.MainFrame, fadeInInfo, {BackgroundTransparency = 0})
    self.Tweens.FadeInTitle = TweenService:Create(self.Title, fadeInInfo, {TextTransparency = 0})
    self.Tweens.FadeInInput = TweenService:Create(self.KeyInput, fadeInInfo, {BackgroundTransparency = 0, TextTransparency = 0})
    self.Tweens.FadeInButton = TweenService:Create(self.SubmitButton, fadeInInfo, {BackgroundTransparency = 0, TextTransparency = 0})
    self.Tweens.FadeInStatus = TweenService:Create(self.StatusLabel, fadeInInfo, {TextTransparency = 0})
    
    local fadeOutInfo = TweenInfo.new(self.Config.AnimationDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    self.Tweens.FadeOutFrame = TweenService:Create(self.MainFrame, fadeOutInfo, {BackgroundTransparency = 1})
    self.Tweens.FadeOutTitle = TweenService:Create(self.Title, fadeOutInfo, {TextTransparency = 1})
    self.Tweens.FadeOutInput = TweenService:Create(self.KeyInput, fadeOutInfo, {BackgroundTransparency = 1, TextTransparency = 1})
    self.Tweens.FadeOutButton = TweenService:Create(self.SubmitButton, fadeOutInfo, {BackgroundTransparency = 1, TextTransparency = 1})
    self.Tweens.FadeOutStatus = TweenService:Create(self.StatusLabel, fadeOutInfo, {TextTransparency = 1})
    
    local hoverInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    self.Tweens.ButtonHover = TweenService:Create(self.SubmitButton, hoverInfo, {BackgroundColor3 = self.Config.ButtonHoverColor})
    self.Tweens.ButtonUnhover = TweenService:Create(self.SubmitButton, hoverInfo, {BackgroundColor3 = self.Config.ButtonBackground})
    
    self.Tweens.ShakeInput = TweenService:Create(self.KeyInput, TweenInfo.new(0.05, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 2, true), {Position = UDim2.new(0.05, 5, 0, 80)})
end

-- Bind Events
function KeySystemLibrary:BindEvents()
    self.SubmitButton.MouseEnter:Connect(function()
        self.Tweens.ButtonHover:Play()
    end)
    
    self.SubmitButton.MouseLeave:Connect(function()
        self.Tweens.ButtonUnhover:Play()
    end)
    
    self.SubmitButton.MouseButton1Click:Connect(function()
        self:ValidateKey(self.KeyInput.Text)
    end)
    
    self.KeyInput.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            self:ValidateKey(self.KeyInput.Text)
        end
    end)
end

-- Show GUI
function KeySystemLibrary:Show()
    self.Tweens.FadeInFrame:Play()
    self.Tweens.FadeInTitle:Play()
    self.Tweens.FadeInInput:Play()
    self.Tweens.FadeInButton:Play()
    self.Tweens.FadeInStatus:Play()
end

-- Destroy GUI
function KeySystemLibrary:Destroy()
    self.Tweens.FadeOutFrame:Play()
    self.Tweens.FadeOutTitle:Play()
    self.Tweens.FadeOutInput:Play()
    self.Tweens.FadeOutButton:Play()
    self.Tweens.FadeOutStatus:Play()
    
    self.Tweens.FadeOutFrame.Completed:Connect(function()
        self.ScreenGui:Destroy()
    end)
end

-- Set Validation Callback
function KeySystemLibrary:SetValidationCallback(callback)
    self.ValidationCallback = callback
end

-- Validate Key
function KeySystemLibrary:ValidateKey(key)
    local success, message = false, "Invalid Key! Please try again."
    
    if self.ValidationCallback then
        success, message = self.ValidationCallback(key)
    else
        success = key == "ABC123"
        message = success and "Key Accepted! Access Granted." or "Invalid Key! Please try again."
    end
    
    self.StatusLabel.Text = message
    self.StatusLabel.TextColor3 = success and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    
    local sound = Instance.new("Sound")
    sound.SoundId = success and self.Config.SuccessSoundId or self.Config.ErrorSoundId
    sound.Parent = self.MainFrame
    sound:Play()
    
    if success then
        wait(1)
        self:Destroy()
    else
        self.Tweens.ShakeInput:Play()
    end
end

-- Return Library
return function(config)
    return KeySystemLibrary.new(config)
endyFrame
    local KeyBoxUICorner = Instance.new("UICorner")
    KeyBoxUICorner.CornerRadius = UDim.new(0, 8)
    KeyBoxUICorner.Parent = KeyBox

    local KeyButton = Instance.new("TextButton")
    KeyButton.Size = UDim2.new(1, -20, 0, 30)
    KeyButton.Position = UDim2.new(0, 10, 0, 80)
    KeyButton.BackgroundColor3 = windowConfig.PrimaryColor
    KeyButton.Text = "Submit"
    KeyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyButton.TextSize = 14
    KeyButton.Font = Enum.Font.GothamBold
    KeyButton.Parent = KeyFrame
    local KeyButtonUICorner = Instance.new("UICorner")
    KeyButtonUICorner.CornerRadius = UDim.new(0, 8)
    KeyButtonUICorner.Parent = KeyButton
    animateButton(KeyButton)

    local KeyLink = Instance.new("TextButton")
    KeyLink.Size = UDim2.new(1, -20, 0, 30)
    KeyLink.Position = UDim2.new(0, 10, 0, 110)
    KeyLink.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    KeyLink.Text = "Get Key"
    KeyLink.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyLink.TextSize = 14
    KeyLink.Font = Enum.Font.GothamBold
    KeyLink.Parent = KeyFrame
    local KeyLinkUICorner = Instance.new("UICorner")
    KeyLinkUICorner.CornerRadius = UDim.new(0, 8)
    KeyLinkUICorner.Parent = KeyLink
    animateButton(KeyLink)
    if AutoCopyLink then
        setclipboard("https://example.com/getkey")
        CleanUI:Notify("Link Copied", "The key link has been copied to your clipboard!", 3)
    end
    KeyLink.MouseButton1Click:Connect(function()
        setclipboard("https://example.com/getkey")
        CleanUI:Notify("Link Copied", "The key link has been copied to your clipboard!", 3)
    end)

    local keyVerified = not KeySystemEnabled
    KeyButton.MouseButton1Click:Connect(function()
        if KeyBox.Text == "validkey" or not KeySystemEnabled then -- Replace "validkey" with your key
            keyVerified = true
            TweenService:Create(KeyFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            for _, child in ipairs(KeyFrame:GetChildren()) do
                TweenService:Create(child, TweenInfo.new(0.5), {BackgroundTransparency = 1, TextTransparency = 1}):Play()
            end
            wait(0.5)
            KeyFrame.Visible = false
            MainFrame.Visible = true
            CleanUI:Notify("Success", "Key verified successfully!", 3)
        else
            CleanUI:Notify("Error", "Invalid key entered.", 3)
        end
    end)

    -- Loading Screen
    local LoadingFrame = Instance.new("Frame")
    LoadingFrame.Size = UDim2.new(0, 200, 0, 100)
    LoadingFrame.Position = UDim2.new(0.5, -100, 0.5, -50)
    LoadingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    LoadingFrame.BorderSizePixel = 0
    LoadingFrame.Parent = ScreenGui
    local LoadingUICorner = Instance.new("UICorner")
    LoadingUICorner.CornerRadius = UDim.new(0, 12)
    LoadingUICorner.Parent = LoadingFrame

    local LoadingLabel = Instance.new("TextLabel")
    LoadingLabel.Size = UDim2.new(1, 0, 0, 30)
    LoadingLabel.Position = UDim2.new(0, 0, 0, 10)
    LoadingLabel.BackgroundTransparency = 1
    LoadingLabel.Text = "Loading CleanUI..."
    LoadingLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    LoadingLabel.TextSize = 16
    LoadingLabel.Font = Enum.Font.GothamBold
    LoadingLabel.Parent = LoadingFrame

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Size = UDim2.new(0.8, 0, 0, 20)
    LoadingBar.Position = UDim2.new(0.1, 0, 0, 50)
    LoadingBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    LoadingBar.Parent = LoadingFrame
    local LoadingBarUICorner = Instance.new("UICorner")
    LoadingBarUICorner.CornerRadius = UDim.new(0, 8)
    LoadingBarUICorner.Parent = LoadingBar

    local LoadingProgress = Instance.new("Frame")
    LoadingProgress.Size = UDim2.new(0, 0, 1, 0)
    LoadingProgress.BackgroundColor3 = windowConfig.PrimaryColor
    LoadingProgress.Parent = LoadingBar
    local LoadingProgressUICorner = Instance.new("UICorner")
    LoadingProgressUICorner.CornerRadius = UDim.new(0, 8)
    LoadingProgressUICorner.Parent = LoadingProgress

    MainFrame.Visible = not KeySystemEnabled
    KeyFrame.Visible = KeySystemEnabled
    LoadingFrame.Visible = true
    TweenService:Create(LoadingProgress, TweenInfo.new(2), {Size = UDim2.new(1, 0, 1, 0)}):Play()
    wait(2)
    TweenService:Create(LoadingFrame, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
    for _, child in ipairs(LoadingFrame:GetChildren()) do
        TweenService:Create(child, TweenInfo.new(0.5), {BackgroundTransparency = 1, TextTransparency = 1}):Play()
    end
    wait(0.5)
    LoadingFrame.Visible = false

    -- Tab Creation
    function CleanUI:CreateTab(tabConfig)
        local tab = {
            Name = tabConfig.Name or "Tab",
            Icon = tabConfig.Icon or "📋"
        }
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(1, -10, 0, 30)
        TabButton.Position = UDim2.new(0, 5, 0, 5)
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.Text = tab.Icon .. " " .. tab.Name
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.Gotham
        TabButton.Parent = TabContainer
        local TabButtonUICorner = Instance.new("UICorner")
        TabButtonUICorner.CornerRadius = UDim.new(0, 8)
        TabButtonUICorner.Parent = TabButton

        local TabContent = Instance.new("Frame")
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.BackgroundTransparency = 1
        TabContent.Parent = ContentArea
        TabContent.Visible = false
        local TabContentList = Instance.new("UIListLayout")
        TabContentList.Padding = UDim.new(0, 10)
        TabContentList.Parent = TabContent

        Tabs[tab.Name] = {Button = TabButton, Content = TabContent}
        TabButton.MouseButton1Click:Connect(function()
            for _, t in pairs(Tabs) do
                t.Content.Visible = false
                TweenService:Create(t.Button, TweenInfo.new(0.3), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
            end
            TabContent.Visible = true
            TweenService:Create(TabButton, TweenInfo.new(0.3), {BackgroundColor3 = windowConfig.PrimaryColor}):Play()
        end)
        if not Tabs.active then
            Tabs.active = tab.Name
            TabContent.Visible = true
            TabButton.BackgroundColor3 = windowConfig.PrimaryColor
        end

        -- Component Methods
        local Components = {}

        function Components:Button(config)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -20, 0, 30)
            button.Position = UDim2.new(0, 10, 0, 0)
            button.BackgroundColor3 = windowConfig.PrimaryColor
            button.Text = config.Text or "Button"
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.TextSize = 14
            button.Font = Enum.Font.Gotham
            button.Parent = TabContent
            local ButtonUICorner = Instance.new("UICorner")
            ButtonUICorner.CornerRadius = UDim.new(0, 8)
            ButtonUICorner.Parent = button
            button.MouseButton1Click:Connect(function()
                if config.Callback then
                    config.Callback()
                end
            end)
            animateButton(button)
        end

        function Components:Toggle(config)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Size = UDim2.new(1, -20, 0, 30)
            toggleFrame.Position = UDim2.new(0, 10, 0, 0)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = TabContent

            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Size = UDim2.new(0.8, 0, 1, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = config.Text or "Toggle"
            toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            toggleLabel.TextSize = 14
            toggleLabel.Font = Enum.Font.Gotham
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.Parent = toggleFrame

            local toggleButton = Instance.new("Frame")
            toggleButton.Size = UDim2.new(0, 40, 0, 20)
            toggleButton.Position = UDim2.new(1, -40, 0, 5)
            toggleButton.BackgroundColor3 = config.Default and windowConfig.PrimaryColor or Color3.fromRGB(100, 100, 100)
            toggleButton.Parent = toggleFrame
            local ToggleUICorner = Instance.new("UICorner")
            ToggleUICorner.CornerRadius = UDim.new(0, 10)
            ToggleUICorner.Parent = toggleButton

            local toggleCircle = Instance.new("Frame")
            toggleCircle.Size = UDim2.new(0, 16, 0, 16)
            toggleCircle.Position = config.Default and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2)
            toggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            toggleCircle.Parent = toggleButton
            local CircleUICorner = Instance.new("UICorner")
            CircleUICorner.CornerRadius = UDim.new(0, 10)
            CircleUICorner.Parent = toggleCircle

            local toggled = config.Default or false
            toggleButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    toggled = not toggled
                    TweenService:Create(toggleCircle, TweenInfo.new(0.3), {Position = toggled and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2)}):Play()
                    TweenService:Create(toggleButton, TweenInfo.new(0.3), {BackgroundColor3 = toggled and windowConfig.PrimaryColor or Color3.fromRGB(100, 100, 100)}):Play()
                    if config.Callback then
                        config.Callback(toggled)
                    end
                end
            end)
        end

        function Components:TextBox(config)
                        Textbox.Text = Default or Text or ""
            Textbox.PlaceholderText = Text or "Enter text..."
            Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
            Textbox.TextSize = 18
            Textbox.Font = Enum.Font.Arcade
            Textbox.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Textbox

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Textbox

            Textbox.Focused:Connect(function()
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0}):Play()
            end)
            Textbox.FocusLost:Connect(function(enterPressed)
                TweenService:Create(Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Transparency = 0.5}):Play()
                if enterPressed and Callback then
                    Callback(Textbox.Text)
                end
            end)

            Tab.NextPosition = Tab.NextPosition + UDim2.new(0, 0, 0, 55)
            table.insert(Tab.Elements, Textbox)
        end

        function Tab:AddDropdown(Text, Options, Default, Callback)
            local Dropdown = Instance.new("Frame")
            Dropdown.Size = UDim2.new(1, 0, 0, 45)
            Dropdown.Position = Tab.NextPosition
            Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            Dropdown.BackgroundTransparency = 0.2
            Dropdown.Parent = Tab.Frame

            local Corner = Instance.new("UICorner")
            Corner.CornerRadius = UDim.new(0, 10)
            Corner.Parent = Dropdown

            local Stroke = Instance.new("UIStroke")
            Stroke.Color = Color3.fromRGB(0, 255, 255)
            Stroke.Thickness = 1.5
            Stroke.Transparency = 0.5
            Stroke.Parent = Dropdown

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -40, 1, 0)
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = Text or "Dropdown: " .. (Default or Options[1])
            Label.TextColor3 = Color3.fromRGB(255, 255, 255)
            Label.TextSize = 18
            Label.Font = Enum.Font.Arcade
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Dropdown

            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Size = UDim2.new(0, 30, 0, 30)
            DropdownButton.Position = UDim2.new(1, -35, 0, 7.5)
            DropdownButton.BackgroundTransparency = 1
            DropdownButton.Text = "▼"
            DropdownButton.TextColor3 = Color3.fromRGB(0, 255, 255)
            DropdownButton.TextSize = 16
            DropdownButton.Font = Enum.Font.Arcade
            DropdownButton.Parent = Dropdown

            local OptionFrame = Instance.new("Frame")
            OptionFrame.Size = UDim2.new(1, 0, 0, #Options * 40)
            OptionFrame.Position = UDim2.new(0, 0, 1, 5)
            OptionFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
            OptionFrame.BackgroundTransparency = 0.1
            OptionFrame.Visible = false
            OptionFrame.Parent = Dropdown

            local OptionCorner = Instance.new("UICorner")
            OptionCorner.CornerRadius = UDim.new(0, 10)
            OptionCorner.Parent = OptionFrame

            local OptionStroke = Instance.new("UIStroke")
            OptionStroke.Color = Color3.fromRGB(0, 255, 255)
            OptionStroke.Thickness = 1.5
            OptionStroke.Transparency = 0.5
            OptionStroke.Parent = OptionFrame

            local OptionList = Instance.new("UIListLayout")
            OptionList.SortState = not State
            Toggle.Text = Text or "Toggle: " .. (State and "On" or "Off")
            local targetColor = State and Color3.fromRGB(0, 255, 200) or Color3.fromRGB(40, 40, 40)
            TweenService:Create(Toggle, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundColor3 = targetColor, BackgroundTransparency = 0.2}):Play()
            if Callback then
                Callback(State)
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Toggle)
    end

    function Window:AddSlider(Text, Min, Max, Default, Callback)
        local Slider = Instance.new("Frame")
        Slider.Size = UDim2.new(1, -40, 0, 60)
        Slider.Position = Window.NextPosition
        Slider.BackgroundTransparency = 1
        Slider.Parent = Window.Frame

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Text = Text or "Slider: " .. (Default or Min)
        Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Label.TextSize = 16
        Label.Font = Enum.Font.SciFi
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Slider

        local SliderBar = Instance.new("Frame")
        SliderBar.Size = UDim2.new(1, 0, 0, 10)
        SliderBar.Position = UDim2.new(0, 0, 0, 30)
        SliderBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        SliderBar.Parent = Slider

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 5)
        Corner.Parent = SliderBar

        local Fill = Instance.new("Frame")
        Fill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
        Fill.BackgroundColor3 = Color3.fromRGB(0, 255, 200)
        Fill.Parent = SliderBar

        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 5)
        FillCorner.Parent = Fill

        local Value = Default or Min
        local Dragging = false

        SliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = true
            end
        end)

        SliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = false
            end
        end)

        RunService.RenderStepped:Connect(function()
            if Dragging then
                local mousePos = UserInputService:GetMouseLocation()
                local relativeX = math.clamp((mousePos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                Value = Min + (Max - Min) * relativeX
                Value = math.floor(Value + 0.5)
                Fill.Size = UDim2.new(relativeX, 0, 1, 0)
                Label.Text = Text or "Slider: " .. Value
                if Callback then
                    Callback(Value)
                end
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 70)
        table.insert(Window.Elements, Slider)
    end

    function Window:AddTextbox(Text, Default, Callback)
        local Textbox = Instance.new("TextBox")
        Textbox.Size = UDim2.new(1, -40, 0, 45)
        Textbox.Position = Window.NextPosition
        Textbox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Textbox.BackgroundTransparency = 0.2
        Textbox.Text = Default or Text or ""
        Textbox.PlaceholderText = Text or "Enter text..."
        Textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
        Textbox.TextSize = 18
        Textbox.Font = Enum.Font.SciFi
        Textbox.Parent = Window.Frame

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 10)
        Corner.Parent = Textbox

        local Stroke = Instance.new("UIStroke")
        Stroke.Color = Color3.fromRGB(0, 255, 200)
        Stroke.Thickness = 1.5
        Stroke.Transparency = 0.5
        Stroke.Parent = Textbox

        Textbox.FocusLost:Connect(function(enterPressed)
            if enterPressed and Callback then
                Callback(Textbox.Text)
            end
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Textbox)
    end

    function Window:AddDropdown(Text, Options, Default, Callback)
        local Dropdown = Instance.new("Frame")
        Dropdown.Size = UDim2.new(1, -40, 0, 45)
        Dropdown.Position = Window.NextPosition
        Dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Dropdown.BackgroundTransparency = 0.2
        Dropdown.Parent = Window.Frame

        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 10)
        Corner.Parent = Dropdown

        local Stroke = Instance.new("UIStroke")
        Stroke.Color = Color3.fromRGB(0, 255, 200)
        Stroke.Thickness = 1.5
        Stroke.Transparency = 0.5
        Stroke.Parent = Dropdown

        local Label = Instance.new("TextLabel")
        Label.Size = UDim2.new(1, -30, 1, 0)
        Label.Position = UDim2.new(0, 10, 0, 0)
        Label.BackgroundTransparency = 1
        Label.Text = Text or "Dropdown: " .. (Default or Options[1])
        Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Label.TextSize = 18
        Label.Font = Enum.Font.SciFi
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Parent = Dropdown

        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Size = UDim2.new(0, 30, 0, 30)
        DropdownButton.Position = UDim2.new(1, -35, 0, 7.5)
        DropdownButton.BackgroundTransparency = 1
        DropdownButton.Text = "▼"
        DropdownButton.TextColor3 = Color3.fromRGB(0, 255, 200)
        DropdownButton.TextSize = 16
        DropdownButton.Font = Enum.Font.SciFi
        DropdownButton.Parent = Dropdown

        local OptionFrame = Instance.new("Frame")
        OptionFrame.Size = UDim2.new(1, 0, 0, #Options * 40)
        OptionFrame.Position = UDim2.new(0, 0, 1, 5)
        OptionFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
        OptionFrame.BackgroundTransparency = 0.1
        OptionFrame.Visible = false
        OptionFrame.Parent = Dropdown

        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 10)
        OptionCorner.Parent = OptionFrame

        local OptionStroke = Instance.new("UIStroke")
        OptionStroke.Color = Color3.fromRGB(0, 255, 200)
        OptionStroke.Thickness = 1.5
        OptionStroke.Transparency = 0.5
        OptionStroke.Parent = OptionFrame

        local OptionList = Instance.new("UIListLayout")
        OptionList.SortOrder = Enum.SortOrder.LayoutOrder
        OptionList.Parent = OptionFrame

        local Selected = Default or Options[1]
        for i, option in ipairs(Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 40)
            OptionButton.BackgroundTransparency = 0.2
            OptionButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            OptionButton.Text = option
            OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            OptionButton.TextSize = 16
            OptionButton.Font = Enum.Font.SciFi
            OptionButton.Parent = OptionFrame

            local OptionButtonCorner = Instance.new("UICorner")
            OptionButtonCorner.CornerRadius = UDim.new(0, 8)
            OptionButtonCorner.Parent = OptionButton

            OptionButton.MouseButton1Click:Connect(function()
                Selected = option
                Label.Text = Text or "Dropdown: " .. Selected
                OptionFrame.Visible = false
                if Callback then
                    Callback(Selected)
                end
            end)
        end

        DropdownButton.MouseButton1Click:Connect(function()
            OptionFrame.Visible = not OptionFrame.Visible
            TweenService:Create(DropdownButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {Rotation = OptionFrame.Visible and 180 or 0}):Play()
        end)

        Window.NextPosition = Window.NextPosition + UDim2.new(0, 0, 0, 55)
        table.insert(Window.Elements, Dropdown)
    end

    return Window
end

-- Notify function with dynamic animation
function NeptuneUI:Notify(Text, Duration)
    local Notification = Instance.new("Frame")
    Notification.Size = UDim2.new(0, 300, 0, 70)
    Notification.Position = UDim2.new(1, 310, 1, -80)
    Notification.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Notification.BackgroundTransparency = 0.1
    Notification.BorderSizePixel = 0
    Notification.Parent = self.ScreenGui

    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = Notification

    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color3.fromRGB(0, 255, 200)
    Stroke.Thickness = 2
    Stroke.Transparency = 0.3
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -20, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 18
    Label.Font = Enum.Font.SciFi
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.TextWrapped = true
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out), {Position = UDim2.new(1, -310, 1, -80)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Exponential, Enum.EasingDirection.In), {Position = UDim2.new(1, 310, 1, -80)})
    olor3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = toggleFrame })

                local toggleLabel = createInstance("TextLabel", {
                    Parent = toggleFrame,
                    Size = UDim2.new(1, -50, 1, 0),
                    Position = UDim2.new(0, 5, 0, 0),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Toggle",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local toggleButton = createInstance("Frame", {
                    Parent = toggleFrame,
                    Size = UDim2.new(0, 40, 0, 20),
                    Position = UDim2.new(1, -45, 0.5, -10),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 10), Parent = toggleButton })

                local toggleCircle = createInstance("Frame", {
                    Parent = toggleButton,
                    Size = UDim2.new(0, 16, 0, 16),
                    Position = UDim2.new(0, 2, 0.5, -8),
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = toggleCircle })

                local enabled = config.Default or false
                if enabled then
                    toggleCircle.Position = UDim2.new(1, -18, 0.5, -8)
                    toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 255)
                end

                toggleButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        enabled = not enabled
                        createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3, Enum.EasingStyle.Quad)
                        createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                        if config.Callback then
                            config.Callback(enabled)
                        end
                    end
                end)
                updateSectionHeight()

                toggle.Set = function(value)
                    enabled = value
                    createTween(toggleCircle, { Position = UDim2.new(enabled and 1 or 0, enabled and -18 or 2, 0.5, -8) }, 0.3)
                    createTween(toggleButton, { BackgroundColor3 = enabled and Color3.fromRGB(100, 100, 255) or Color3.fromRGB(70, 70, 80) }, 0.3)
                    if config.Callback then
                        config.Callback(enabled)
                    end
                end
                return toggle
            end

            -- Slider
            function section:AddSlider(config)
                local slider = {}
                local min, max, default = config.Min or 0, config.Max or 100, config.Default or 50
                local sliderFrame = createInstance("Frame", {
                    Parent = section,
                    Size = UDim2.new(1, -10, 0, 50),
                    BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 6), Parent = sliderFrame })

                local sliderLabel = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -10, 0, 20),
                    Position = UDim2.new(0, 5, 0, 5),
                    BackgroundTransparency = 1,
                    Text = config.Title or "Slider",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Left
                })

                local sliderBar = createInstance("Frame", {
                    Parent = sliderFrame,
                    Size = UDim2.new(1, -20, 0, 6),
                    Position = UDim2.new(0, 10, 0, 30),
                    BackgroundColor3 = Color3.fromRGB(70, 70, 80),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = sliderBar })

                local fillBar = createInstance("Frame", {
                    Parent = sliderBar,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                    BackgroundColor3 = Color3.fromRGB(100, 100, 255),
                    BorderSizePixel = 0
                })
                createInstance("UICorner", { CornerRadius = UDim.new(0, 3), Parent = fillBar })

                local sliderValue = createInstance("TextLabel", {
                    Parent = sliderFrame,
                    Size = UDim2.new(0, 50, 0, 20),
                    Position = UDim2.new(1, -60, 0, 5),
                    BackgroundTransparency = 1,
                    Text = tostring(default),
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    Font = Enum.Font.Gotham
                })

                local dragging = false
                sliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                    end
                end)
                sliderBar.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mouseX = input.Position.X
                        local barX = sliderBar.AbsolutePosition.X
                        local barWidth = sliderBar.AbsoluteSize.X
                        local relativeX = math.clamp((mouseX - barX) / barWidth, 0, 1)
                        local value = min + (max - min) * relativeX
                        value = math.floor(value + 0.5)
                        createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                        sliderValue.Text = tostring(value)
                        if config.Callback then
                            config.Callback(value)
                        end
                    end
                end)
                updateSectionHeight()

                slider.Set = function(value)
                    value = math.clamp(value, min, max)
                    local relativeX = (value - min) / (max - min)
                    createTween(fillBar, { Size = UDim2.new(relativeX, 0, 1, 0) }, 0.1)
                    sliderValue.Text = tostring(value)
                    if config.Callback then
                        config.Callback(value)
                    end
                end
                return slider
            end

            return section
        end

        tabs[#tabs + 1] = tab
        if #tabs == 1 then
            tabButton:SimulateClick()
        end
        return tab
    end

    -- Notification System
    function window:CreateNotification(config)
        local notification = createInstance("Frame", {
            Parent = screenGui,
            Size = UDim2.new(0, 250, 0, 80),
            Position = UDim2.new(1, -260, 1, -90),
            BackgroundColor3 = Color3.fromRGB(35, 35, 45),
            BorderSizePixel = 0
        })
        createInstance("UICorner", { CornerRadius = UDim.new(0, 8), Parent = notification })

        local title = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 20),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Text = config.Title or "Notification",
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            Font = Enum.Font.GothamBold,
            TextXAlignment = Enum.TextXAlignment.Left
        })

        local description = createInstance("TextLabel", {
            Parent = notification,
            Size = UDim2.new(1, -10, 0, 40),
            Position = UDim2.new(0, 5, 0, 25),
            BackgroundTransparency = 1,
            Text = config.Description or "This is a notification.",
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 12,
            Font = Enum.Font.Gotham,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true
        })

        createTween(notification, { BackgroundTransparency = 0, Position = UDim2.new(1, -260, 1, -90) }, 0.5).Completed:Connect(function()
            wait(config.Duration or 3)
            createTween(notification, { BackgroundTransparency = 1, Position = UDim2.new(1, -260, 1, -110) }, 0.5).Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end

    return window
end

return NeptuneUI.round(value)
                TweenService:Create(Fill, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Size = UDim2.new(relX, 0, 1, 0)
                }):Play()
                TweenService:Create(Knob, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
                    Position = UDim2.new(relX, -10, 0, -5)
                }):Play()
                ValueLabel.Text = tostring(value)
                if callback then callback(value) end
            end
        end)

        return SliderFrame
    end

    -- Notification system
    function Window:CreateNotification(text, duration)
        local Notification = Instance.new("Frame")
        Notification.Size = UDim2.new(0, 300, 0, 100)
        Notification.Position = UDim2.new(1, -320, 1, -120)
        Notification.BackgroundColor3 = Config.Theme.BackgroundColor
        Notification.BackgroundTransparency = 0.2
        Notification.Parent = ScreenGui

        local UICorner = Instance.new("UICorner")
        UICorner.CornerRadius = UDim.new(0, Config.Theme.BorderRadius)
        UICorner.Parent = Notification

        local TextLabel = Instance.new("TextLabel")
        TextLabel.Size = UDim2.new(1, -20, 1, -20)
        TextLabel.Position = UDim2.new(0, 10, 0, 10)
        TextLabel.BackgroundTransparency = 1
        TextLabel.Text = text or "Notification"
        TextLabel.TextColor3 = Config.Theme.TextColor
        TextLabel.Font = Config.Theme.Font
        TextLabel.TextSize = 14
        TextLabel.TextWrapped = true
        TextLabel.Parent = Notification

        -- Slide-in animation
        Notification.Position = UDim2.new(1, 0, 1, -120)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, -320, 1, -120)
        }):Play()

        -- Auto-dismiss
        wait(duration or 3)
        TweenService:Create(Notification, TweenInfo.new(Config.Animation.Duration, Config.Animation.EasingStyle, Config.Animation.EasingDirection), {
            Position = UDim2.new(1, 0, 1, -120)
        }):Play()
        wait(Config.Animation.Duration)
        Notification:Destroy()
    end

    return Window
end

-- Theme customization
function NeptuneUI:SetTheme(theme)
    for key, value in pairs(theme) do
        Config.Theme[key] = value
    end
end

return NeptuneUIe.Transparency = 0.5
    Stroke.Parent = Notification

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -10, 1, 0)
    Label.Position = UDim2.new(0, 5, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = Text or "Notification"
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Notification

    -- Slide-in animation
    local tweenIn = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -260, 1, -70)})
    tweenIn:Play()
    tweenIn.Completed:Wait()

    -- Slide-out animation after duration
    spawn(function()
        wait(Duration or 3)
        local tweenOut = TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Position = UDim2.new(1, 260, 1, -70)})
        tweenOut:Play()
        tweenOut.Completed:Wait()
        Notification:Destroy()
    end)
end

return NeptuneUI
