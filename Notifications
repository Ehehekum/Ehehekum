--[[ 
    Custom Notification System
    by Chou
    Support: Info, Option, Error, Success
    Bisa dipanggil pakai getgenv().Notify
--]]

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Buat ScreenGui khusus
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CustomNotify"
screenGui.Parent = playerGui
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

-- Container buat notifikasi
local container = Instance.new("Frame")
container.Size = UDim2.new(0, 300, 1, -50)
container.Position = UDim2.new(1, -310, 0, 50)
container.BackgroundTransparency = 1
container.Parent = screenGui

-- UIListLayout buat stacking notifikasi
local listLayout = Instance.new("UIListLayout")
listLayout.Padding = UDim.new(0, 8)
listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
listLayout.VerticalAlignment = Enum.VerticalAlignment.Top
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Parent = container

-- Fungsi bikin notifikasi
local function createNotify(ntype, title, description)
    local colors = {
        Info = Color3.fromRGB(0, 170, 255),
        Option = Color3.fromRGB(255, 170, 0),
        Error = Color3.fromRGB(255, 70, 70),
        Success = Color3.fromRGB(50, 220, 100),
    }
    
    local notify = Instance.new("Frame")
    notify.Size = UDim2.new(1, 0, 0, 70)
    notify.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notify.BackgroundTransparency = 0.1
    notify.BorderSizePixel = 0
    notify.ClipsDescendants = true
    notify.Parent = container
    
    local corner = Instance.new("UICorner", notify)
    corner.CornerRadius = UDim.new(0, 12)

    local stroke = Instance.new("UIStroke", notify)
    stroke.Thickness = 2
    stroke.Color = colors[ntype] or Color3.fromRGB(200, 200, 200)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Text = title or "Notification"
    titleLabel.Size = UDim2.new(1, -20, 0, 24)
    titleLabel.Position = UDim2.new(0, 10, 0, 5)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.BackgroundTransparency = 1
    titleLabel.Parent = notify

    local descLabel = Instance.new("TextLabel")
    descLabel.Text = description or ""
    descLabel.Size = UDim2.new(1, -20, 0, 40)
    descLabel.Position = UDim2.new(0, 10, 0, 28)
    descLabel.Font = Enum.Font.Gotham
    descLabel.TextSize = 14
    descLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    descLabel.TextXAlignment = Enum.TextXAlignment.Left
    descLabel.TextYAlignment = Enum.TextYAlignment.Top
    descLabel.TextWrapped = true
    descLabel.BackgroundTransparency = 1
    descLabel.Parent = notify

    notify.BackgroundTransparency = 1
    notify.Size = UDim2.new(1, 0, 0, 0)

    -- Animasi muncul
    TweenService:Create(notify, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
        BackgroundTransparency = 0,
        Size = UDim2.new(1, 0, 0, 70)
    }):Play()

    task.delay(5, function()
        -- Animasi keluar
        TweenService:Create(notify, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 0)
        }):Play()
        task.wait(0.5)
        notify:Destroy()
    end)
end

-- API lewat getgenv()
getgenv().Notify = {
    Info = function(title, desc)
        createNotify("Info", title, desc)
    end,
    Option = function(title, desc)
        createNotify("Option", title, desc)
    end,
    Error = function(title, desc)
        createNotify("Error", title, desc)
    end,
    Success = function(title, desc)
        createNotify("Success", title, desc)
    end
}   end
            end
            for i = #notificationQueue, 1, -1 do
                if not notificationQueue[i].Parent then
                    table.remove(notificationQueue, i)
                end
            end
            print("Notification dismissed")
        end)
    end

    clickButton.MouseButton1Click:Connect(dismiss)
    scaleProgress:Play()
    scaleProgress.Completed:Connect(dismiss)

    -- Add to queue
    table.insert(notificationQueue, notificationFrame)
    print("Notification added to queue")

    -- Enforce max notifications
    if activeNotifications > CONFIG.MaxNotifications then
        local oldest = table.remove(notificationQueue, 1)
        if oldest and oldest.Parent then
            oldest:Destroy()
            activeNotifications = activeNotifications - 1
            _G.activeNotifications = activeNotifications
            print("Removed oldest notification")
        end
    end
end

-- Expose globally
_G.Notify = NotificationUI.Notify
print("NotificationUI loaded successfully")

-- Test notification
NotificationUI:Notify({Title = "Test", Description = "Debug notification!", Theme = "Scene"})
return NotificationUI- 1) * 0.15)) or (0 + ((i - 1) * 0.15))
                    local tween = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Position = position == "BottomRight" and UDim2.new(1, -320, 1, -120 - ((i - 1) * 120)) or UDim2.new(1, -320, 0, 20 + ((i - 1) * 120))
                    })
                    tween:Play()
                end
            end
            -- Clean queue
            for i = #notificationQueue, 1, -1 do
                if not notificationQueue[i].Parent then
                    table.remove(notificationQueue, i)
                end
            end
        end)
    end

    clickButton.MouseButton1Click:Connect(dismiss)
    scaleProgress:Play()
    scaleProgress.Completed:Connect(dismiss)

    -- Add to queue
    table.insert(notificationQueue, notificationFrame)

    -- Enforce max notifications
    if activeNotifications > CONFIG.MaxNotifications then
        local oldest = table.remove(notificationQueue, 1)
        if oldest and oldest.Parent then
            oldest:Destroy()
            activeNotifications = activeNotifications - 1
            _G.activeNotifications = activeNotifications
        end
    end
end

-- Expose globally
_G.Notify = NotificationUI.Notify

-- Example notifications
NotificationUI:Notify({Title = "Welcome!", Description = "Loaded the notification UI!", Theme = "Scene"})
wait(2)
NotificationUI:Notify({Title = "Update", Description = "Try the new themes!", Theme = "Rainbow", Duration = 7, SoundId = "rbxassetid://9120386446"})

-- Return the table
return NotificationUI
