local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CustomNotifUI"
screenGui.Parent = playerGui
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.ResetOnSpawn = false

-- Global notification table
getgenv().notif = {
    List = {},
    Settings = {
        DisplayTime = 4,
        MaxNotifications = 5,
        AnimationSpeed = 0.3,
        Theme = "Dark", -- Default theme
        EnabledTypes = {
            Info = false, -- Default to false, controlled in example
            Choice = false -- Default to false, controlled in example
        }
    }
}

-- Theme color palettes
local themes = {
    Dark = {
        Background = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(0, 170, 255),
        Border = Color3.fromRGB(50, 50, 50)
    },
    Light = {
        Background = Color3.fromRGB(240, 240, 240),
        Text = Color3.fromRGB(20, 20, 20),
        Accent = Color3.fromRGB(0, 120, 255),
        Border = Color3.fromRGB(200, 200, 200)
    },
    Rainbow = {
        Background = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(255, 0, 0), -- Will be animated
        Border = Color3.fromRGB(50, 50, 50)
    },
    Epilepsy = {
        Background = Color3.fromRGB(30, 30, 30),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(255, 255, 0), -- Rapid color changes
        Border = Color3.fromRGB(50, 50, 50)
    }
}

-- Update notification positions with smooth stacking
local function updateNotificationPositions()
    for i, notifFrame in ipairs(getgenv().notif.List) do
        local targetY = -((150 + 10) * (i - 1) + 15)
        notifFrame:TweenPosition(
            UDim2.new(1, -15, 1, targetY),
            Enum.EasingDirection.Out,
            Enum.EasingStyle.Sine,
            getgenv().notif.Settings.AnimationSpeed,
            true
        )
    end
end

-- Rainbow animation for Rainbow theme
local function startRainbowAnimation(frame, accentPart)
    spawn(function()
        while frame.Parent do
            for i = 0, 1, 0.02 do
                if not frame.Parent then break end
                accentPart.BackgroundColor3 = Color3.fromHSV(i, 1, 1)
                wait(0.05)
            end
        end
    end)
end

-- Epilepsy animation (rapid flashing, use with caution)
local function startEpilepsyAnimation(frame, accentPart)
    spawn(function()
        while frame.Parent do
            if not frame.Parent then break end
            accentPart.BackgroundColor3 = Color3.fromRGB(
                math.random(0, 255),
                math.random(0, 255),
                math.random(0, 255)
            )
            wait(0.1)
        end
    end)
end

-- Create notification frame
local function createNotification(contentText, titleText, notifType, options, iconId)
    if not getgenv().notif.Settings.EnabledTypes[notifType] then return end
    if #getgenv().notif.List >= getgenv().notif.Settings.MaxNotifications then
        local oldestNotif = table.remove(getgenv().notif.List, #getgenv().notif.List)
        if oldestNotif then oldestNotif:Destroy() end
    end

    local theme = themes[getgenv().notif.Settings.Theme]
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 350, 0, 150)
    frame.Position = UDim2.new(1, 15, 1, 0)
    frame.AnchorPoint = Vector2.new(1, 1)
    frame.BackgroundColor3 = theme.Background
    frame.BackgroundTransparency = 0.1
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    frame.ClipsDescendants = true

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = frame

    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = theme.Border
    uiStroke.Thickness = 2
    uiStroke.Parent = frame

    local accentBar = Instance.new("Frame")
    accentBar.Size = UDim2.new(0, 8, 1, 0)
    accentBar.Position = UDim2.new(0, 0, 0, 0)
    accentBar.BackgroundColor3 = theme.Accent
    accentBar.BorderSizePixel = 0
    accentBar.Parent = frame

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Parent = frame
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0.05, 0, 0.08, 0)
    title.Size = UDim2.new(0, 250, 0, 30)
    title.Font = Enum.Font.GothamBold
    title.Text = titleText or notifType
    title.TextColor3 = theme.Text
    title.TextScaled = true
    title.TextWrapped = true
    title.TextXAlignment = Enum.TextXAlignment.Left

    local content = Instance.new("TextLabel")
    content.Name = "Content"
    content.Parent = frame
    content.BackgroundTransparency = 1
    content.Position = UDim2.new(0.05, 0, 0.28, 0)
    content.Size = UDim2.new(0, 300, 0, 60)
    content.Font = Enum.Font.Gotham
    content.Text = contentText or "Notification Content"
    content.TextColor3 = theme.Text
    content.TextSize = 18
    content.TextWrapped = true
    content.TextXAlignment = Enum.TextXAlignment.Left
    content.TextYAlignment = Enum.TextYAlignment.Top

    local image = Instance.new("ImageLabel")
    image.Parent = frame
    image.BackgroundTransparency = 1
    image.Position = UDim2.new(0.85, 0, 0.08, 0)
    image.Size = UDim2.new(0, 40, 0, 40)
    image.Image = iconId or "rbxassetid://112082878863231" -- Default icon

    -- Handle choice notification
    if notifType == "Choice" and options then
        local buttonFrame = Instance.new("Frame")
        buttonFrame.Size = UDim2.new(0, 300, 0, 30)
        buttonFrame.Position = UDim2.new(0.05, 0, 0.65, 0)
        buttonFrame.BackgroundTransparency = 1
        buttonFrame.Parent = frame

        local acceptButton = Instance.new("TextButton")
        acceptButton.Size = UDim2.new(0, 100, 0, 30)
        acceptButton.Position = UDim2.new(0, 0, 0, 0)
        acceptButton.BackgroundColor3 = theme.Accent
        acceptButton.Text = options.AcceptText or "Accept"
        acceptButton.TextColor3 = theme.Text
        acceptButton.Font = Enum.Font.Gotham
        acceptButton.TextScaled = true
        acceptButton.Parent = buttonFrame
        local acceptCorner = Instance.new("UICorner")
        acceptCorner.CornerRadius = UDim.new(0, 8)
        acceptCorner.Parent = acceptButton

        local declineButton = Instance.new("TextButton")
        declineButton.Size = UDim2.new(0, 100, 0, 30)
        declineButton.Position = UDim2.new(0.67, 0, 0, 0)
        declineButton.BackgroundColor3 = theme.Border
        declineButton.Text = options.DeclineText or "Decline"
        declineButton.TextColor3 = theme.Text
        declineButton.Font = Enum.Font.Gotham
        declineButton.TextScaled = true
        declineButton.Parent = buttonFrame
        local declineCorner = Instance.new("UICorner")
        declineCorner.CornerRadius = UDim.new(0, 8)
        declineCorner.Parent = declineButton

        acceptButton.MouseButton1Click:Connect(function()
            if options.AcceptCallback then options.AcceptCallback() end
            frame:Destroy()
            table.remove(getgenv().notif.List, table.find(getgenv().notif.List, frame))
            updateNotificationPositions()
        end)

        declineButton.MouseButton1Click:Connect(function()
            if options.DeclineCallback then options.DeclineCallback() end
            frame:Destroy()
            table.remove(getgenv().notif.List, table.find(getgenv().notif.List, frame))
            updateNotificationPositions()
        end)
    end

    -- Theme-specific animations
    if getgenv().notif.Settings.Theme == "Rainbow" then
        startRainbowAnimation(frame, accentBar)
    elseif getgenv().notif.Settings.Theme == "Epilepsy" then
        startEpilepsyAnimation(frame, accentBar)
    end

    table.insert(getgenv().notif.List, 1, frame)

    -- Smooth entrance animation
    frame:TweenPosition(
        UDim2.new(1, -15, 1, -15),
        Enum.EasingDirection.Out,
        Enum.EasingStyle.Back,
        getgenv().notif.Settings.AnimationSpeed,
        true
    )

    -- Exit animation after display time (except for Choice)
    if notifType ~= "Choice" then
        task.delay(getgenv().notif.Settings.DisplayTime, function()
            frame:TweenPosition(
                UDim2.new(1, 15, 1, frame.Position.Y.Offset),
                Enum.EasingDirection.In,
                Enum.EasingStyle.Sine,
                getgenv().notif.Settings.AnimationSpeed,
                true
            )
            task.wait(getgenv().notif.Settings.AnimationSpeed)
            frame:Destroy()
            table.remove(getgenv().notif.List, table.find(getgenv().notif.List, frame))
            updateNotificationPositions()
        end)
    end

    updateNotificationPositions()
end

-- Notification functions
getgenv().notif.Info = function(content, title, iconId)
    createNotification(content or "Info notification", title or "Info", "Info", nil, iconId)
end

getgenv().notif.Choice = function(content, title, options, iconId)
    createNotification(content or "Choice notification", title or "Choice", "Choice", options or {}, iconId)
end

-- Theme setting function
getgenv().notif.SetTheme = function(themeName)
    if themes[themeName] then
        getgenv().notif.Settings.Theme = themeName
    end
end

-- Enable/disable notification types
getgenv().notif.SetTypeEnabled = function(typeName, enabled)
    if getgenv().notif.Settings.EnabledTypes[typeName] ~= nil then
        getgenv().notif.Settings.EnabledTypes[typeName] = enabled
    end
endmRight" and (1 - ((i - 1) * 0.15)) or ((i - 1) * 0.15)
                    local tween = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Position = position == "BottomRight" and UDim2.new(1, -320, 1, -120 - ((i - 1) * 120)) or UDim2.new(1, -320, 0, 20 + ((i - 1) * 120))
                    })
                    tween:Play()
                end
            end
            for i = #notificationQueue, 1, -1 do
                if not notificationQueue[i].Parent then
                    table.remove(notificationQueue, i)
                end
            end
            print("Notification dismissed")
        end)
    end

    clickButton.MouseButton1Click:Connect(dismiss)
    scaleProgress:Play()
    scaleProgress.Completed:Connect(dismiss)

    -- Add to queue
    table.insert(notificationQueue, notificationFrame)
    print("Notification added to queue")

    -- Enforce max notifications
    if activeNotifications > CONFIG.MaxNotifications then
        local oldest = table.remove(notificationQueue, 1)
        if oldest and oldest.Parent then
            oldest:Destroy()
            activeNotifications = activeNotifications - 1
            _G.activeNotifications = activeNotifications
            print("Removed oldest notification")
        end
    end
end

-- Expose globally
_G.Notify = NotificationUI.Notify
print("NotificationUI loaded successfully")

-- Test notification
NotificationUI:Notify({Title = "Test", Description = "Debug notification!", Theme = "Scene"})
return NotificationUI- 1) * 0.15)) or (0 + ((i - 1) * 0.15))
                    local tween = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
                        Position = position == "BottomRight" and UDim2.new(1, -320, 1, -120 - ((i - 1) * 120)) or UDim2.new(1, -320, 0, 20 + ((i - 1) * 120))
                    })
                    tween:Play()
                end
            end
            -- Clean queue
            for i = #notificationQueue, 1, -1 do
                if not notificationQueue[i].Parent then
                    table.remove(notificationQueue, i)
                end
            end
        end)
    end

    clickButton.MouseButton1Click:Connect(dismiss)
    scaleProgress:Play()
    scaleProgress.Completed:Connect(dismiss)

    -- Add to queue
    table.insert(notificationQueue, notificationFrame)

    -- Enforce max notifications
    if activeNotifications > CONFIG.MaxNotifications then
        local oldest = table.remove(notificationQueue, 1)
        if oldest and oldest.Parent then
            oldest:Destroy()
            activeNotifications = activeNotifications - 1
            _G.activeNotifications = activeNotifications
        end
    end
end

-- Expose globally
_G.Notify = NotificationUI.Notify

-- Example notifications
NotificationUI:Notify({Title = "Welcome!", Description = "Loaded the notification UI!", Theme = "Scene"})
wait(2)
NotificationUI:Notify({Title = "Update", Description = "Try the new themes!", Theme = "Rainbow", Duration = 7, SoundId = "rbxassetid://9120386446"})

-- Return the table
return NotificationUI
