-- Advanced Notification UI Library
-- Features: Stacking notifications, reusable GUI, smooth animations, close button, customizable positions, types, and durations.

local NotificationLibrary = {}
NotificationLibrary.__index = NotificationLibrary

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

-- Module variables
local activeNotifs = {}
local mainGui
local holderFrame

-- Setup Main GUI (called once)
local function setupMainGui(position)
    if mainGui then return end
    
    mainGui = Instance.new("ScreenGui")
    mainGui.Name = "NotificationGui"
    mainGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    mainGui.ResetOnSpawn = false
    mainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    holderFrame = Instance.new("Frame")
    holderFrame.Name = "Holder"
    holderFrame.BackgroundTransparency = 1
    holderFrame.Size = UDim2.new(0, 300, 0, 0)
    holderFrame.Position = position or UDim2.new(1, -320, 0, 20)  -- Default: Top-right
    holderFrame.Parent = mainGui
end

-- Reposition all active notifications with animation
local function repositionNotifs()
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local yOffset = 0
    for i, notif in ipairs(activeNotifs) do
        local targetPos = UDim2.new(0, 0, 0, yOffset)
        TweenService:Create(notif.Frame, tweenInfo, {Position = targetPos}):Play()
        yOffset = yOffset + notif.Frame.Size.Y.Offset + 10  -- Padding between notifs
    end
    -- Resize holder to fit
    TweenService:Create(holderFrame, tweenInfo, {Size = UDim2.new(0, 300, 0, yOffset)}):Play()
end

-- Notification Creation
function NotificationLibrary.new(config)
    setupMainGui(config.position)
    
    config = config or {}
    local title = config.title or "Notification"
    local body = config.body or "This is a notification."
    local notificationType = config.type or "info"
    local duration = config.duration or 5
    local onClose = config.onClose or function() end
    
    -- Define styles
    local styles = {
        success = {Color = Color3.fromRGB(0, 255, 128), Icon = "rbxassetid://10618928818"},
        info = {Color = Color3.fromRGB(0, 191, 255), Icon = "rbxassetid://3926305904"},
        error = {Color = Color3.fromRGB(255, 69, 58), Icon = "rbxassetid://5107154082"}
    }
    local style = styles[notificationType] or styles.info

    -- Create Notification Frame
    local NotifFrame = Instance.new("Frame")
    NotifFrame.Size = UDim2.new(1, 0, 0, 80)  -- Reduced height for compactness
    NotifFrame.Position = UDim2.new(1, 0, 0, 0)  -- Start off-screen right
    NotifFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    NotifFrame.BorderSizePixel = 0
    NotifFrame.Parent = holderFrame
    NotifFrame.ZIndex = 1400 + #activeNotifs

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = NotifFrame

    -- Icon
    local Icon = Instance.new("ImageLabel")
    Icon.Size = UDim2.new(0, 30, 0, 30)
    Icon.Position = UDim2.new(0, 10, 0, 10)
    Icon.BackgroundTransparency = 1
    Icon.Image = style.Icon
    Icon.ImageColor3 = style.Color
    Icon.Parent = NotifFrame

    -- Title
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Size = UDim2.new(0, 220, 0, 20)
    TitleLabel.Position = UDim2.new(0, 50, 0, 10)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextScaled = true
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = NotifFrame

    -- Body
    local BodyLabel = Instance.new("TextLabel")
    BodyLabel.Size = UDim2.new(0, 220, 0, 40)
    BodyLabel.Position = UDim2.new(0, 50, 0, 30)
    BodyLabel.BackgroundTransparency = 1
    BodyLabel.Text = body
    BodyLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    BodyLabel.TextScaled = true
    BodyLabel.TextWrapped = true
    BodyLabel.Font = Enum.Font.Gotham
    BodyLabel.TextXAlignment = Enum.TextXAlignment.Left
    BodyLabel.Parent = NotifFrame

    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Position = UDim2.new(1, -30, 0, 10)
    CloseButton.BackgroundTransparency = 1
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = NotifFrame

    -- Progress Bar
    local ProgressBar = Instance.new("Frame")
    ProgressBar.Size = UDim2.new(1, 0, 0, 3)
    ProgressBar.Position = UDim2.new(0, 0, 1, -3)
    ProgressBar.BackgroundColor3 = style.Color
    ProgressBar.BorderSizePixel = 0
    ProgressBar.Parent = NotifFrame

    -- Instance table
    local self = setmetatable({
        Frame = NotifFrame,
        Duration = duration,
        OnClose = onClose
    }, NotificationLibrary)

    -- Add to active
    table.insert(activeNotifs, self)
    repositionNotifs()

    -- Slide In Animation
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(NotifFrame, tweenInfo, {Position = UDim2.new(0, 0, NotifFrame.Position.Y.Scale, NotifFrame.Position.Y.Offset)}):Play()

    -- Progress Animation
    local progressTween = TweenService:Create(ProgressBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 0, 3)})
    progressTween:Play()

    -- Auto-close
    task.spawn(function()
        task.wait(duration)
        self:Close()
    end)

    -- Close Button Event
    CloseButton.MouseButton1Click:Connect(function()
        self:Close()
    end)

    return self
end

-- Close Method
function NotificationLibrary:Close()
    local index = table.find(activeNotifs, self)
    if not index then return end
    
    table.remove(activeNotifs, index)
    
    -- Fade Out and Slide Out
    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    TweenService:Create(self.Frame, tweenInfo, {Position = UDim2.new(1, 0, self.Frame.Position.Y.Scale, self.Frame.Position.Y.Offset), BackgroundTransparency = 1}):Play()
    for _, child in ipairs(self.Frame:GetChildren()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            TweenService:Create(child, tweenInfo, {TextTransparency = 1}):Play()
        elseif child:IsA("ImageLabel") then
            TweenService:Create(child, tweenInfo, {ImageTransparency = 1}):Play()
        elseif child:IsA("Frame") then
            TweenService:Create(child, tweenInfo, {BackgroundTransparency = 1}):Play()
        end
    end
    
    task.delay(0.5, function()
        self.Frame:Destroy()
        self.OnClose()
        repositionNotifs()
        if #activeNotifs == 0 and mainGui then
            mainGui:Destroy()
            mainGui = nil
            holderFrame = nil
        end
    end)
end

return NotificationLibrary
